define(['dart_sdk', 'packages/flutter/src/painting/edge_insets.dart', 'packages/flutter/src/widgets/widget_span.dart', 'packages/flutter/src/painting/_network_image_web.dart', 'packages/flutter/src/animation/listener_helpers.dart', 'packages/syncfusion_flutter_core/src/theme/theme_widget.dart', 'packages/flutter/src/painting/box_decoration.dart', 'packages/flutter/src/painting/decoration_image.dart', 'packages/flutter/src/painting/box_fit.dart', 'packages/flutter/src/painting/box_border.dart', 'packages/flutter/src/rendering/proxy_box.dart', 'packages/flutter/src/animation/animation_controller.dart', 'packages/flutter/src/foundation/change_notifier.dart', 'packages/flutter/src/rendering/layer.dart', 'packages/flutter/src/widgets/layout_builder.dart', 'packages/flutter/src/scheduler/binding.dart', 'packages/flutter/src/gestures/events.dart', 'packages/flutter/src/gestures/tap.dart', 'packages/syncfusion_flutter_core/tooltip_internal.dart', 'packages/flutter/src/rendering/custom_paint.dart', 'packages/flutter/src/animation/curves.dart', 'packages/flutter/src/material/colors.dart', 'packages/flutter/src/foundation/key.dart', 'packages/flutter/src/painting/strut_style.dart', 'packages/syncfusion_flutter_core/core.dart', 'packages/syncfusion_flutter_core/src/slider_controller.dart', 'packages/intl/src/intl/date_format.dart', 'packages/intl/src/intl/number_parser.dart', 'packages/flutter/src/painting/colors.dart', 'packages/flutter/src/painting/gradient.dart', 'packages/flutter/src/rendering/paragraph.dart', 'packages/flutter/src/painting/alignment.dart', 'packages/flutter/src/gestures/long_press.dart', 'packages/flutter/src/gestures/drag_details.dart', 'packages/flutter/src/painting/border_radius.dart', 'packages/flutter/src/rendering/shifted_box.dart', 'packages/flutter/src/widgets/single_child_scroll_view.dart', 'packages/flutter/src/painting/basic_types.dart', 'packages/flutter/src/rendering/flex.dart', 'packages/syncfusion_flutter_charts/src/common/handcursor/web.dart', 'packages/flutter/src/painting/image_stream.dart', 'packages/flutter/src/painting/placeholder_span.dart'], (function load__packages__syncfusion_flutter_charts__charts_dart(dart_sdk, packages__flutter__src__painting__edge_insets$46dart, packages__flutter__src__widgets__widget_span$46dart, packages__flutter__src__painting___network_image_web$46dart, packages__flutter__src__animation__listener_helpers$46dart, packages__syncfusion_flutter_core__src__theme__theme_widget$46dart, packages__flutter__src__painting__box_decoration$46dart, packages__flutter__src__painting__decoration_image$46dart, packages__flutter__src__painting__box_fit$46dart, packages__flutter__src__painting__box_border$46dart, packages__flutter__src__rendering__proxy_box$46dart, packages__flutter__src__animation__animation_controller$46dart, packages__flutter__src__foundation__change_notifier$46dart, packages__flutter__src__rendering__layer$46dart, packages__flutter__src__widgets__layout_builder$46dart, packages__flutter__src__scheduler__binding$46dart, packages__flutter__src__gestures__events$46dart, packages__flutter__src__gestures__tap$46dart, packages__syncfusion_flutter_core__tooltip_internal$46dart, packages__flutter__src__rendering__custom_paint$46dart, packages__flutter__src__animation__curves$46dart, packages__flutter__src__material__colors$46dart, packages__flutter__src__foundation__key$46dart, packages__flutter__src__painting__strut_style$46dart, packages__syncfusion_flutter_core__core$46dart, packages__syncfusion_flutter_core__src__slider_controller$46dart, packages__intl__src__intl__date_format$46dart, packages__intl__src__intl__number_parser$46dart, packages__flutter__src__painting__colors$46dart, packages__flutter__src__painting__gradient$46dart, packages__flutter__src__rendering__paragraph$46dart, packages__flutter__src__painting__alignment$46dart, packages__flutter__src__gestures__long_press$46dart, packages__flutter__src__gestures__drag_details$46dart, packages__flutter__src__painting__border_radius$46dart, packages__flutter__src__rendering__shifted_box$46dart, packages__flutter__src__widgets__single_child_scroll_view$46dart, packages__flutter__src__painting__basic_types$46dart, packages__flutter__src__rendering__flex$46dart, packages__syncfusion_flutter_charts__src__common__handcursor__web$46dart, packages__flutter__src__painting__image_stream$46dart, packages__flutter__src__painting__placeholder_span$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const ui = dart_sdk.ui;
  const _interceptors = dart_sdk._interceptors;
  const _internal = dart_sdk._internal;
  const async = dart_sdk.async;
  const math = dart_sdk.math;
  const _js_helper = dart_sdk._js_helper;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const edge_insets = packages__flutter__src__painting__edge_insets$46dart.src__painting__edge_insets;
  const framework = packages__flutter__src__widgets__widget_span$46dart.src__widgets__framework;
  const media_query = packages__flutter__src__widgets__widget_span$46dart.src__widgets__media_query;
  const basic = packages__flutter__src__widgets__widget_span$46dart.src__widgets__basic;
  const gesture_detector = packages__flutter__src__widgets__widget_span$46dart.src__widgets__gesture_detector;
  const container = packages__flutter__src__widgets__widget_span$46dart.src__widgets__container;
  const widget_inspector = packages__flutter__src__widgets__widget_span$46dart.src__widgets__widget_inspector;
  const ticker_provider = packages__flutter__src__widgets__widget_span$46dart.src__widgets__ticker_provider;
  const text = packages__flutter__src__widgets__widget_span$46dart.src__widgets__text;
  const transitions = packages__flutter__src__widgets__widget_span$46dart.src__widgets__transitions;
  const image_provider = packages__flutter__src__painting___network_image_web$46dart.src__painting__image_provider;
  const animation$ = packages__flutter__src__animation__listener_helpers$46dart.src__animation__animation;
  const tween = packages__flutter__src__animation__listener_helpers$46dart.src__animation__tween;
  const animations = packages__flutter__src__animation__listener_helpers$46dart.src__animation__animations;
  const charts_theme = packages__syncfusion_flutter_core__src__theme__theme_widget$46dart.src__theme__charts_theme;
  const box_decoration = packages__flutter__src__painting__box_decoration$46dart.src__painting__box_decoration;
  const decoration_image = packages__flutter__src__painting__decoration_image$46dart.src__painting__decoration_image;
  const box_fit = packages__flutter__src__painting__box_fit$46dart.src__painting__box_fit;
  const box_border = packages__flutter__src__painting__box_border$46dart.src__painting__box_border;
  const proxy_box = packages__flutter__src__rendering__proxy_box$46dart.src__rendering__proxy_box;
  const animation_controller = packages__flutter__src__animation__animation_controller$46dart.src__animation__animation_controller;
  const change_notifier = packages__flutter__src__foundation__change_notifier$46dart.src__foundation__change_notifier;
  const box = packages__flutter__src__rendering__layer$46dart.src__rendering__box;
  const object = packages__flutter__src__rendering__layer$46dart.src__rendering__object;
  const layout_builder = packages__flutter__src__widgets__layout_builder$46dart.src__widgets__layout_builder;
  const binding = packages__flutter__src__scheduler__binding$46dart.src__scheduler__binding;
  const events = packages__flutter__src__gestures__events$46dart.src__gestures__events;
  const tap = packages__flutter__src__gestures__tap$46dart.src__gestures__tap;
  const tooltip_internal = packages__syncfusion_flutter_core__tooltip_internal$46dart.tooltip_internal;
  const custom_paint = packages__flutter__src__rendering__custom_paint$46dart.src__rendering__custom_paint;
  const curves = packages__flutter__src__animation__curves$46dart.src__animation__curves;
  const colors = packages__flutter__src__material__colors$46dart.src__material__colors;
  const key = packages__flutter__src__foundation__key$46dart.src__foundation__key;
  const text_style = packages__flutter__src__painting__strut_style$46dart.src__painting__text_style;
  const core$ = packages__syncfusion_flutter_core__core$46dart.core;
  const slider_controller = packages__syncfusion_flutter_core__src__slider_controller$46dart.src__slider_controller;
  const date_format = packages__intl__src__intl__date_format$46dart.src__intl__date_format;
  const number_format = packages__intl__src__intl__number_parser$46dart.src__intl__number_format;
  const colors$ = packages__flutter__src__painting__colors$46dart.src__painting__colors;
  const gradient = packages__flutter__src__painting__gradient$46dart.src__painting__gradient;
  const paragraph = packages__flutter__src__rendering__paragraph$46dart.src__rendering__paragraph;
  const alignment = packages__flutter__src__painting__alignment$46dart.src__painting__alignment;
  const long_press = packages__flutter__src__gestures__long_press$46dart.src__gestures__long_press;
  const drag_details = packages__flutter__src__gestures__drag_details$46dart.src__gestures__drag_details;
  const border_radius = packages__flutter__src__painting__border_radius$46dart.src__painting__border_radius;
  const shifted_box = packages__flutter__src__rendering__shifted_box$46dart.src__rendering__shifted_box;
  const single_child_scroll_view = packages__flutter__src__widgets__single_child_scroll_view$46dart.src__widgets__single_child_scroll_view;
  const basic_types = packages__flutter__src__painting__basic_types$46dart.src__painting__basic_types;
  const flex = packages__flutter__src__rendering__flex$46dart.src__rendering__flex;
  const web = packages__syncfusion_flutter_charts__src__common__handcursor__web$46dart.src__common__handcursor__web;
  const image_stream = packages__flutter__src__painting__image_stream$46dart.src__painting__image_stream;
  const text_span = packages__flutter__src__painting__placeholder_span$46dart.src__painting__text_span;
  const text_painter = packages__flutter__src__painting__placeholder_span$46dart.src__painting__text_painter;
  var charts = Object.create(dart.library);
  dart._checkModuleNullSafetyMode(true);
  var T$ = {
    JSArrayOfCircularSeries: () => (T$.JSArrayOfCircularSeries = dart.constFn(_interceptors.JSArray$(charts.CircularSeries)))(),
    CircularSeriesRendererN: () => (T$.CircularSeriesRendererN = dart.constFn(dart.nullable(charts.CircularSeriesRenderer)))(),
    JSArrayOfCircularSeriesRendererN: () => (T$.JSArrayOfCircularSeriesRendererN = dart.constFn(_interceptors.JSArray$(T$.CircularSeriesRendererN())))(),
    JSArrayOfWidget: () => (T$.JSArrayOfWidget = dart.constFn(_interceptors.JSArray$(framework.Widget)))(),
    JSArrayOfAnimationController: () => (T$.JSArrayOfAnimationController = dart.constFn(_interceptors.JSArray$(animation_controller.AnimationController)))(),
    ValueNotifierOfint: () => (T$.ValueNotifierOfint = dart.constFn(change_notifier.ValueNotifier$(core.int)))(),
    JSArrayOf_MeasureWidgetContext: () => (T$.JSArrayOf_MeasureWidgetContext = dart.constFn(_interceptors.JSArray$(charts._MeasureWidgetContext)))(),
    JSArrayOfint: () => (T$.JSArrayOfint = dart.constFn(_interceptors.JSArray$(core.int)))(),
    JSArrayOf_ChartTemplateInfo: () => (T$.JSArrayOf_ChartTemplateInfo = dart.constFn(_interceptors.JSArray$(charts._ChartTemplateInfo)))(),
    JSArrayOf_LegendRenderContext: () => (T$.JSArrayOf_LegendRenderContext = dart.constFn(_interceptors.JSArray$(charts._LegendRenderContext)))(),
    JSArrayOfChartPoint: () => (T$.JSArrayOfChartPoint = dart.constFn(_interceptors.JSArray$(charts.ChartPoint)))(),
    JSArrayOf_Region: () => (T$.JSArrayOf_Region = dart.constFn(_interceptors.JSArray$(charts._Region)))(),
    JSArrayOfRect: () => (T$.JSArrayOfRect = dart.constFn(_interceptors.JSArray$(ui.Rect)))(),
    ChartPointN: () => (T$.ChartPointN = dart.constFn(dart.nullable(charts.ChartPoint)))(),
    ListOfChartPointN: () => (T$.ListOfChartPointN = dart.constFn(core.List$(T$.ChartPointN())))(),
    VoidTovoid: () => (T$.VoidTovoid = dart.constFn(dart.fnType(dart.void, [])))(),
    DurationTovoid: () => (T$.DurationTovoid = dart.constFn(dart.fnType(dart.void, [core.Duration])))(),
    BuildContextAndBoxConstraintsToWidget: () => (T$.BuildContextAndBoxConstraintsToWidget = dart.constFn(dart.fnType(framework.Widget, [framework.BuildContext, box.BoxConstraints])))(),
    PointerEventTovoid: () => (T$.PointerEventTovoid = dart.constFn(dart.fnType(dart.void, [events.PointerEvent])))(),
    PointerUpEventTovoid: () => (T$.PointerUpEventTovoid = dart.constFn(dart.fnType(dart.void, [events.PointerUpEvent])))(),
    PointerDownEventTovoid: () => (T$.PointerDownEventTovoid = dart.constFn(dart.fnType(dart.void, [events.PointerDownEvent])))(),
    PointerMoveEventTovoid: () => (T$.PointerMoveEventTovoid = dart.constFn(dart.fnType(dart.void, [events.PointerMoveEvent])))(),
    TapUpDetailsTovoid: () => (T$.TapUpDetailsTovoid = dart.constFn(dart.fnType(dart.void, [tap.TapUpDetails])))(),
    BuildContextAndBoxConstraintsToContainer: () => (T$.BuildContextAndBoxConstraintsToContainer = dart.constFn(dart.fnType(container.Container, [framework.BuildContext, box.BoxConstraints])))(),
    StateOfStatefulWidget: () => (T$.StateOfStatefulWidget = dart.constFn(framework.State$(framework.StatefulWidget)))(),
    GlobalKeyOfStateOfStatefulWidget: () => (T$.GlobalKeyOfStateOfStatefulWidget = dart.constFn(framework.GlobalKey$(T$.StateOfStatefulWidget())))(),
    VoidToCustomPainter: () => (T$.VoidToCustomPainter = dart.constFn(dart.fnType(custom_paint.CustomPainter, [])))(),
    CustomPainterTodynamic: () => (T$.CustomPainterTodynamic = dart.constFn(dart.fnType(dart.dynamic, [custom_paint.CustomPainter])))(),
    TweenOfdouble: () => (T$.TweenOfdouble = dart.constFn(tween.Tween$(core.double)))(),
    AnimationStatusTovoid: () => (T$.AnimationStatusTovoid = dart.constFn(dart.fnType(dart.void, [animation$.AnimationStatus])))(),
    JSArrayOfCircularSeriesRenderer: () => (T$.JSArrayOfCircularSeriesRenderer = dart.constFn(_interceptors.JSArray$(charts.CircularSeriesRenderer)))(),
    ChartPointAndChartPointToint: () => (T$.ChartPointAndChartPointToint = dart.constFn(dart.fnType(core.int, [charts.ChartPoint, charts.ChartPoint])))(),
    VoidTobool: () => (T$.VoidTobool = dart.constFn(dart.fnType(core.bool, [])))(),
    boolTodynamic: () => (T$.boolTodynamic = dart.constFn(dart.fnType(dart.dynamic, [core.bool])))(),
    StringN: () => (T$.StringN = dart.constFn(dart.nullable(core.String)))(),
    JSArrayOfPath: () => (T$.JSArrayOfPath = dart.constFn(_interceptors.JSArray$(ui.Path)))(),
    ColorN: () => (T$.ColorN = dart.constFn(dart.nullable(ui.Color)))(),
    numN: () => (T$.numN = dart.constFn(dart.nullable(core.num)))(),
    doubleN: () => (T$.doubleN = dart.constFn(dart.nullable(core.double)))(),
    VoidTonum: () => (T$.VoidTonum = dart.constFn(dart.fnType(core.num, [])))(),
    numTodynamic: () => (T$.numTodynamic = dart.constFn(dart.fnType(dart.dynamic, [core.num])))(),
    JSArrayOfColor: () => (T$.JSArrayOfColor = dart.constFn(_interceptors.JSArray$(ui.Color)))(),
    JSArrayOfdouble: () => (T$.JSArrayOfdouble = dart.constFn(_interceptors.JSArray$(core.double)))(),
    intAndintToint: () => (T$.intAndintToint = dart.constFn(dart.fnType(core.int, [core.int, core.int])))(),
    intTonumN: () => (T$.intTonumN = dart.constFn(dart.fnType(T$.numN(), [core.int])))(),
    intToColorN: () => (T$.intToColorN = dart.constFn(dart.fnType(T$.ColorN(), [core.int])))(),
    intToStringN: () => (T$.intToStringN = dart.constFn(dart.fnType(T$.StringN(), [core.int])))(),
    dynamicAndintAndColor__ToShader: () => (T$.dynamicAndintAndColor__ToShader = dart.constFn(dart.fnType(ui.Shader, [dart.dynamic, core.int, ui.Color, ui.Rect])))(),
    RectN: () => (T$.RectN = dart.constFn(dart.nullable(ui.Rect)))(),
    VoidToChartPoint: () => (T$.VoidToChartPoint = dart.constFn(dart.fnType(charts.ChartPoint, [])))(),
    ChartPointTodynamic: () => (T$.ChartPointTodynamic = dart.constFn(dart.fnType(dart.dynamic, [charts.ChartPoint])))(),
    VoidToRadialBarSeries: () => (T$.VoidToRadialBarSeries = dart.constFn(dart.fnType(charts.RadialBarSeries, [])))(),
    RadialBarSeriesTodynamic: () => (T$.RadialBarSeriesTodynamic = dart.constFn(dart.fnType(dart.dynamic, [charts.RadialBarSeries])))(),
    VoidToint: () => (T$.VoidToint = dart.constFn(dart.fnType(core.int, [])))(),
    intTodynamic: () => (T$.intTodynamic = dart.constFn(dart.fnType(dart.dynamic, [core.int])))(),
    JSArrayOfPyramidSeriesRenderer: () => (T$.JSArrayOfPyramidSeriesRenderer = dart.constFn(_interceptors.JSArray$(charts.PyramidSeriesRenderer)))(),
    JSArrayOfPointInfo: () => (T$.JSArrayOfPointInfo = dart.constFn(_interceptors.JSArray$(charts.PointInfo)))(),
    JSArrayOfnum: () => (T$.JSArrayOfnum = dart.constFn(_interceptors.JSArray$(core.num)))(),
    JSArrayOfOffset: () => (T$.JSArrayOfOffset = dart.constFn(_interceptors.JSArray$(ui.Offset)))(),
    JSArrayOfFunnelSeriesRenderer: () => (T$.JSArrayOfFunnelSeriesRenderer = dart.constFn(_interceptors.JSArray$(charts.FunnelSeriesRenderer)))(),
    ListOfPointInfo: () => (T$.ListOfPointInfo = dart.constFn(core.List$(charts.PointInfo)))(),
    JSArrayOfPlotBand: () => (T$.JSArrayOfPlotBand = dart.constFn(_interceptors.JSArray$(charts.PlotBand)))(),
    JSArrayOfAxisLabel: () => (T$.JSArrayOfAxisLabel = dart.constFn(_interceptors.JSArray$(charts.AxisLabel)))(),
    JSArrayOfCartesianSeriesRenderer: () => (T$.JSArrayOfCartesianSeriesRenderer = dart.constFn(_interceptors.JSArray$(charts.CartesianSeriesRenderer)))(),
    VoidTodouble: () => (T$.VoidTodouble = dart.constFn(dart.fnType(core.double, [])))(),
    doubleTodynamic: () => (T$.doubleTodynamic = dart.constFn(dart.fnType(dart.dynamic, [core.double])))(),
    DateTimeN: () => (T$.DateTimeN = dart.constFn(dart.nullable(core.DateTime)))(),
    JSArrayOfString: () => (T$.JSArrayOfString = dart.constFn(_interceptors.JSArray$(core.String)))(),
    JSArrayOfChartAxisRenderer: () => (T$.JSArrayOfChartAxisRenderer = dart.constFn(_interceptors.JSArray$(charts.ChartAxisRenderer)))(),
    JSArrayOf_AxisSize: () => (T$.JSArrayOf_AxisSize = dart.constFn(_interceptors.JSArray$(charts._AxisSize)))(),
    JSArrayOfChartAxis: () => (T$.JSArrayOfChartAxis = dart.constFn(_interceptors.JSArray$(charts.ChartAxis)))(),
    ListOfCartesianSeriesRenderer: () => (T$.ListOfCartesianSeriesRenderer = dart.constFn(core.List$(charts.CartesianSeriesRenderer)))(),
    ListOfString: () => (T$.ListOfString = dart.constFn(core.List$(core.String)))(),
    ListOfDateTime: () => (T$.ListOfDateTime = dart.constFn(core.List$(core.DateTime)))(),
    StringAndStringToint: () => (T$.StringAndStringToint = dart.constFn(dart.fnType(core.int, [core.String, core.String])))(),
    JSArrayOfDateTime: () => (T$.JSArrayOfDateTime = dart.constFn(_interceptors.JSArray$(core.DateTime)))(),
    _CircularIntervalListOfdouble: () => (T$._CircularIntervalListOfdouble = dart.constFn(charts._CircularIntervalList$(core.double)))(),
    JSArrayOfChartSeries: () => (T$.JSArrayOfChartSeries = dart.constFn(_interceptors.JSArray$(charts.ChartSeries)))(),
    ListOfChartSeries: () => (T$.ListOfChartSeries = dart.constFn(core.List$(charts.ChartSeries)))(),
    JSArrayOfTechnicalIndicators: () => (T$.JSArrayOfTechnicalIndicators = dart.constFn(_interceptors.JSArray$(charts.TechnicalIndicators)))(),
    JSArrayOf_ChartPointInfo: () => (T$.JSArrayOf_ChartPointInfo = dart.constFn(_interceptors.JSArray$(charts._ChartPointInfo)))(),
    LinkedMapOfAnimationController$VoidTovoid: () => (T$.LinkedMapOfAnimationController$VoidTovoid = dart.constFn(_js_helper.LinkedMap$(animation_controller.AnimationController, T$.VoidTovoid())))(),
    JSArrayOf_ZoomAxisRange: () => (T$.JSArrayOf_ZoomAxisRange = dart.constFn(_interceptors.JSArray$(charts._ZoomAxisRange)))(),
    JSArrayOfChartSegment: () => (T$.JSArrayOfChartSegment = dart.constFn(_interceptors.JSArray$(charts.ChartSegment)))(),
    ValueKeyOfString: () => (T$.ValueKeyOfString = dart.constFn(key.ValueKey$(core.String)))(),
    ValueKeyNOfString: () => (T$.ValueKeyNOfString = dart.constFn(dart.nullable(T$.ValueKeyOfString())))(),
    JSArrayOfValueKeyNOfString: () => (T$.JSArrayOfValueKeyNOfString = dart.constFn(_interceptors.JSArray$(T$.ValueKeyNOfString())))(),
    boolN: () => (T$.boolN = dart.constFn(dart.nullable(core.bool)))(),
    JSArrayOfboolN: () => (T$.JSArrayOfboolN = dart.constFn(_interceptors.JSArray$(T$.boolN())))(),
    JSArrayOfPointerEvent: () => (T$.JSArrayOfPointerEvent = dart.constFn(_interceptors.JSArray$(events.PointerEvent)))(),
    JSArrayOf_PainterKey: () => (T$.JSArrayOf_PainterKey = dart.constFn(_interceptors.JSArray$(charts._PainterKey)))(),
    JSArrayOfTechnicalIndicatorsRenderer: () => (T$.JSArrayOfTechnicalIndicatorsRenderer = dart.constFn(_interceptors.JSArray$(charts.TechnicalIndicatorsRenderer)))(),
    AnimationControllerN: () => (T$.AnimationControllerN = dart.constFn(dart.nullable(animation_controller.AnimationController)))(),
    AnimationControllerNAndFnTovoid: () => (T$.AnimationControllerNAndFnTovoid = dart.constFn(dart.fnType(dart.void, [T$.AnimationControllerN(), T$.VoidTovoid()])))(),
    JSArrayOfCartesianChartPoint: () => (T$.JSArrayOfCartesianChartPoint = dart.constFn(_interceptors.JSArray$(charts.CartesianChartPoint)))(),
    ListOfboolN: () => (T$.ListOfboolN = dart.constFn(core.List$(T$.boolN())))(),
    JSArrayOfTrendlineRenderer: () => (T$.JSArrayOfTrendlineRenderer = dart.constFn(_interceptors.JSArray$(charts.TrendlineRenderer)))(),
    PointerSignalEventTovoid: () => (T$.PointerSignalEventTovoid = dart.constFn(dart.fnType(dart.void, [events.PointerSignalEvent])))(),
    TapDownDetailsTovoid: () => (T$.TapDownDetailsTovoid = dart.constFn(dart.fnType(dart.void, [tap.TapDownDetails])))(),
    LongPressMoveUpdateDetailsTovoid: () => (T$.LongPressMoveUpdateDetailsTovoid = dart.constFn(dart.fnType(dart.void, [long_press.LongPressMoveUpdateDetails])))(),
    LongPressEndDetailsTovoid: () => (T$.LongPressEndDetailsTovoid = dart.constFn(dart.fnType(dart.void, [long_press.LongPressEndDetails])))(),
    DragDownDetailsTovoid: () => (T$.DragDownDetailsTovoid = dart.constFn(dart.fnType(dart.void, [drag_details.DragDownDetails])))(),
    DragUpdateDetailsTovoid: () => (T$.DragUpdateDetailsTovoid = dart.constFn(dart.fnType(dart.void, [drag_details.DragUpdateDetails])))(),
    DragEndDetailsTovoid: () => (T$.DragEndDetailsTovoid = dart.constFn(dart.fnType(dart.void, [drag_details.DragEndDetails])))(),
    FnTovoid: () => (T$.FnTovoid = dart.constFn(dart.fnType(dart.void, [T$.VoidTovoid()])))(),
    BuildContextAndFnToWidget: () => (T$.BuildContextAndFnToWidget = dart.constFn(dart.fnType(framework.Widget, [framework.BuildContext, T$.FnTovoid()])))(),
    AnimationOfdouble: () => (T$.AnimationOfdouble = dart.constFn(animation$.Animation$(core.double)))(),
    IdentityMapOfString$AnimationOfdouble: () => (T$.IdentityMapOfString$AnimationOfdouble = dart.constFn(_js_helper.IdentityMap$(core.String, T$.AnimationOfdouble())))(),
    StateOf_TrackballTemplate: () => (T$.StateOf_TrackballTemplate = dart.constFn(framework.State$(charts._TrackballTemplate)))(),
    GlobalKeyOfStateOf_TrackballTemplate: () => (T$.GlobalKeyOfStateOf_TrackballTemplate = dart.constFn(framework.GlobalKey$(T$.StateOf_TrackballTemplate())))(),
    intN: () => (T$.intN = dart.constFn(dart.nullable(core.int)))(),
    dynamicAnddynamicTovoid: () => (T$.dynamicAnddynamicTovoid = dart.constFn(dart.fnType(dart.void, [dart.dynamic, dart.dynamic])))(),
    JSArrayOf_ClusterStackedItemInfo: () => (T$.JSArrayOf_ClusterStackedItemInfo = dart.constFn(_interceptors.JSArray$(charts._ClusterStackedItemInfo)))(),
    TAndTToT: () => (T$.TAndTToT = dart.constFn(dart.gFnType(T => [T, [T, T]], T => [core.num])))(),
    CartesianChartPointN: () => (T$.CartesianChartPointN = dart.constFn(dart.nullable(charts.CartesianChartPoint)))(),
    JSArrayOfCartesianChartPointN: () => (T$.JSArrayOfCartesianChartPointN = dart.constFn(_interceptors.JSArray$(T$.CartesianChartPointN())))(),
    CartesianChartPointAndCartesianChartPointToint: () => (T$.CartesianChartPointAndCartesianChartPointToint = dart.constFn(dart.fnType(core.int, [charts.CartesianChartPoint, charts.CartesianChartPoint])))(),
    JSArrayOf_StackedItemInfo: () => (T$.JSArrayOf_StackedItemInfo = dart.constFn(_interceptors.JSArray$(charts._StackedItemInfo)))(),
    JSArrayOf_StackedValues: () => (T$.JSArrayOf_StackedValues = dart.constFn(_interceptors.JSArray$(charts._StackedValues)))(),
    JSArrayOf_StackingInfo: () => (T$.JSArrayOf_StackingInfo = dart.constFn(_interceptors.JSArray$(charts._StackingInfo)))(),
    TAndTToT$1: () => (T$.TAndTToT$1 = dart.constFn(dart.gFnType(T => [T, [T, T]], T => [core.num])))(),
    IdentityMapOfString$int: () => (T$.IdentityMapOfString$int = dart.constFn(_js_helper.IdentityMap$(core.String, core.int)))(),
    LinkedMapOfString$int: () => (T$.LinkedMapOfString$int = dart.constFn(_js_helper.LinkedMap$(core.String, core.int)))(),
    StringTovoid: () => (T$.StringTovoid = dart.constFn(dart.fnType(dart.void, [core.String])))(),
    BubbleSegmentN: () => (T$.BubbleSegmentN = dart.constFn(dart.nullable(charts.BubbleSegment)))(),
    BoxAndWhiskerSegmentN: () => (T$.BoxAndWhiskerSegmentN = dart.constFn(dart.nullable(charts.BoxAndWhiskerSegment)))(),
    intToboolN: () => (T$.intToboolN = dart.constFn(dart.fnType(T$.boolN(), [core.int])))(),
    PathN: () => (T$.PathN = dart.constFn(dart.nullable(ui.Path)))(),
    JSArrayOfPathN: () => (T$.JSArrayOfPathN = dart.constFn(_interceptors.JSArray$(T$.PathN())))(),
    ListOfOffset: () => (T$.ListOfOffset = dart.constFn(core.List$(ui.Offset)))(),
    JSArrayOfListOfOffset: () => (T$.JSArrayOfListOfOffset = dart.constFn(_interceptors.JSArray$(T$.ListOfOffset())))(),
    HiloSegmentN: () => (T$.HiloSegmentN = dart.constFn(dart.nullable(charts.HiloSegment)))(),
    HiloOpenCloseSegmentN: () => (T$.HiloOpenCloseSegmentN = dart.constFn(dart.nullable(charts.HiloOpenCloseSegment)))(),
    CandleSegmentN: () => (T$.CandleSegmentN = dart.constFn(dart.nullable(charts.CandleSegment)))(),
    LineSegmentN: () => (T$.LineSegmentN = dart.constFn(dart.nullable(charts.LineSegment)))(),
    SplineSegmentN: () => (T$.SplineSegmentN = dart.constFn(dart.nullable(charts.SplineSegment)))(),
    StepLineSegmentN: () => (T$.StepLineSegmentN = dart.constFn(dart.nullable(charts.StepLineSegment)))(),
    numAndnumNTodouble: () => (T$.numAndnumNTodouble = dart.constFn(dart.fnType(core.double, [core.num, T$.numN()])))(),
    ListOfnumN: () => (T$.ListOfnumN = dart.constFn(core.List$(T$.numN())))(),
    JSArrayOfnumN: () => (T$.JSArrayOfnumN = dart.constFn(_interceptors.JSArray$(T$.numN())))(),
    JSArrayOf_ChartLocation: () => (T$.JSArrayOf_ChartLocation = dart.constFn(_interceptors.JSArray$(charts._ChartLocation)))(),
    JSArrayOfRRect: () => (T$.JSArrayOfRRect = dart.constFn(_interceptors.JSArray$(ui.RRect)))(),
    JSArrayOf_TempData: () => (T$.JSArrayOf_TempData = dart.constFn(_interceptors.JSArray$(charts._TempData)))(),
    ListOfnum: () => (T$.ListOfnum = dart.constFn(core.List$(core.num)))(),
    ListOf_BollingerData: () => (T$.ListOf_BollingerData = dart.constFn(core.List$(charts._BollingerData)))(),
    ListOfCartesianChartPoint: () => (T$.ListOfCartesianChartPoint = dart.constFn(core.List$(charts.CartesianChartPoint)))(),
    VoidToList: () => (T$.VoidToList = dart.constFn(dart.fnType(core.List, [])))(),
    ListTodynamic: () => (T$.ListTodynamic = dart.constFn(dart.fnType(dart.dynamic, [core.List])))(),
    dynamicAndintToNull: () => (T$.dynamicAndintToNull = dart.constFn(dart.fnType(core.Null, [dart.dynamic, core.int])))(),
    SelectionArgsTovoid: () => (T$.SelectionArgsTovoid = dart.constFn(dart.fnType(dart.void, [charts.SelectionArgs])))(),
    SelectionArgsToNvoid: () => (T$.SelectionArgsToNvoid = dart.constFn(dart.nullable(T$.SelectionArgsTovoid())))(),
    PaintN: () => (T$.PaintN = dart.constFn(dart.nullable(ui.Paint)))(),
    JSArrayOfCartesianSeries: () => (T$.JSArrayOfCartesianSeries = dart.constFn(_interceptors.JSArray$(charts.CartesianSeries)))(),
    JSArrayOf_ClosestPoints: () => (T$.JSArrayOf_ClosestPoints = dart.constFn(_interceptors.JSArray$(charts._ClosestPoints)))(),
    VoidToCartesianSeriesRenderer: () => (T$.VoidToCartesianSeriesRenderer = dart.constFn(dart.fnType(charts.CartesianSeriesRenderer, [])))(),
    CartesianSeriesRendererTodynamic: () => (T$.CartesianSeriesRendererTodynamic = dart.constFn(dart.fnType(dart.dynamic, [charts.CartesianSeriesRenderer])))(),
    _ClosestPointsAnd_ClosestPointsToint: () => (T$._ClosestPointsAnd_ClosestPointsToint = dart.constFn(dart.fnType(core.int, [charts._ClosestPoints, charts._ClosestPoints])))(),
    _ChartPointInfoAnd_ChartPointInfoToint: () => (T$._ChartPointInfoAnd_ChartPointInfoToint = dart.constFn(dart.fnType(core.int, [charts._ChartPointInfo, charts._ChartPointInfo])))(),
    ListOf_ChartPointInfo: () => (T$.ListOf_ChartPointInfo = dart.constFn(core.List$(charts._ChartPointInfo)))(),
    JSArrayOf_TrackballElement: () => (T$.JSArrayOf_TrackballElement = dart.constFn(_interceptors.JSArray$(charts._TrackballElement)))(),
    LegendN: () => (T$.LegendN = dart.constFn(dart.nullable(charts.Legend)))(),
    VoidTo_MeasureWidgetContext: () => (T$.VoidTo_MeasureWidgetContext = dart.constFn(dart.fnType(charts._MeasureWidgetContext, [])))(),
    _MeasureWidgetContextTodynamic: () => (T$._MeasureWidgetContextTodynamic = dart.constFn(dart.fnType(dart.dynamic, [charts._MeasureWidgetContext])))(),
    VoidTo_LegendRenderContext: () => (T$.VoidTo_LegendRenderContext = dart.constFn(dart.fnType(charts._LegendRenderContext, [])))(),
    _LegendRenderContextTodynamic: () => (T$._LegendRenderContextTodynamic = dart.constFn(dart.fnType(dart.dynamic, [charts._LegendRenderContext])))(),
    IterableOf_LegendRenderContext: () => (T$.IterableOf_LegendRenderContext = dart.constFn(core.Iterable$(charts._LegendRenderContext)))(),
    LegendIconTypeN: () => (T$.LegendIconTypeN = dart.constFn(dart.nullable(charts.LegendIconType)))(),
    TechnicalIndicatorsRendererN: () => (T$.TechnicalIndicatorsRendererN = dart.constFn(dart.nullable(charts.TechnicalIndicatorsRenderer)))(),
    dynamicTovoid: () => (T$.dynamicTovoid = dart.constFn(dart.fnType(dart.void, [dart.dynamic])))(),
    ListOf_LegendRenderContext: () => (T$.ListOf_LegendRenderContext = dart.constFn(core.List$(charts._LegendRenderContext)))(),
    FontWeightN: () => (T$.FontWeightN = dart.constFn(dart.nullable(ui.FontWeight)))(),
    ListOfColor: () => (T$.ListOfColor = dart.constFn(core.List$(ui.Color)))(),
    TrendlineRendererN: () => (T$.TrendlineRendererN = dart.constFn(dart.nullable(charts.TrendlineRenderer)))(),
    ShaderN: () => (T$.ShaderN = dart.constFn(dart.nullable(ui.Shader)))(),
    CanvasAndImageTovoid: () => (T$.CanvasAndImageTovoid = dart.constFn(dart.fnType(dart.void, [ui.Canvas, ui.Image])))(),
    WidgetN: () => (T$.WidgetN = dart.constFn(dart.nullable(framework.Widget)))(),
    BuildContextAndWidgetNToOpacity: () => (T$.BuildContextAndWidgetNToOpacity = dart.constFn(dart.fnType(basic.Opacity, [framework.BuildContext, T$.WidgetN()])))(),
    ListOfRect: () => (T$.ListOfRect = dart.constFn(core.List$(ui.Rect)))(),
    VoidToNull: () => (T$.VoidToNull = dart.constFn(dart.fnType(core.Null, [])))(),
    ListOfAxisLabel: () => (T$.ListOfAxisLabel = dart.constFn(core.List$(charts.AxisLabel)))(),
    ListNOfRect: () => (T$.ListNOfRect = dart.constFn(dart.nullable(T$.ListOfRect())))(),
    ChartAxisRendererN: () => (T$.ChartAxisRendererN = dart.constFn(dart.nullable(charts.ChartAxisRenderer)))(),
    OffsetN: () => (T$.OffsetN = dart.constFn(dart.nullable(ui.Offset)))(),
    ListN: () => (T$.ListN = dart.constFn(dart.nullable(core.List)))(),
    LinearGradientN: () => (T$.LinearGradientN = dart.constFn(dart.nullable(gradient.LinearGradient)))(),
    JSArrayOfLinearGradientN: () => (T$.JSArrayOfLinearGradientN = dart.constFn(_interceptors.JSArray$(T$.LinearGradientN())))(),
    JSArrayOfPaintN: () => (T$.JSArrayOfPaintN = dart.constFn(_interceptors.JSArray$(T$.PaintN())))(),
    DataMarkerTypeN: () => (T$.DataMarkerTypeN = dart.constFn(dart.nullable(core$.DataMarkerType)))(),
    JSArrayOfDataMarkerTypeN: () => (T$.JSArrayOfDataMarkerTypeN = dart.constFn(_interceptors.JSArray$(T$.DataMarkerTypeN())))(),
    CartesianSeriesRendererN: () => (T$.CartesianSeriesRendererN = dart.constFn(dart.nullable(charts.CartesianSeriesRenderer)))(),
    JSArrayOfOffsetN: () => (T$.JSArrayOfOffsetN = dart.constFn(_interceptors.JSArray$(T$.OffsetN())))(),
    ListOf_MeasureWidgetContext: () => (T$.ListOf_MeasureWidgetContext = dart.constFn(core.List$(charts._MeasureWidgetContext)))(),
    CompleterOfImageInfo: () => (T$.CompleterOfImageInfo = dart.constFn(async.Completer$(image_stream.ImageInfo)))(),
    ImageInfoAndboolTovoid: () => (T$.ImageInfoAndboolTovoid = dart.constFn(dart.fnType(dart.void, [image_stream.ImageInfo, core.bool])))(),
    ImageProviderOfObject: () => (T$.ImageProviderOfObject = dart.constFn(image_provider.ImageProvider$(core.Object)))(),
    _ChartLocationN: () => (T$._ChartLocationN = dart.constFn(dart.nullable(charts._ChartLocation)))(),
    JSArrayOf_ChartLocationN: () => (T$.JSArrayOf_ChartLocationN = dart.constFn(_interceptors.JSArray$(T$._ChartLocationN())))(),
    ListOfStringN: () => (T$.ListOfStringN = dart.constFn(core.List$(T$.StringN())))(),
    VoidToChartDataLabelAlignment: () => (T$.VoidToChartDataLabelAlignment = dart.constFn(dart.fnType(charts.ChartDataLabelAlignment, [])))(),
    ChartDataLabelAlignmentTodynamic: () => (T$.ChartDataLabelAlignmentTodynamic = dart.constFn(dart.fnType(dart.dynamic, [charts.ChartDataLabelAlignment])))(),
    JSArrayOfSize: () => (T$.JSArrayOfSize = dart.constFn(_interceptors.JSArray$(ui.Size)))(),
    CartesianChartPointNTodynamic: () => (T$.CartesianChartPointNTodynamic = dart.constFn(dart.fnType(dart.dynamic, [T$.CartesianChartPointN()])))(),
    CartesianChartPointTodynamic: () => (T$.CartesianChartPointTodynamic = dart.constFn(dart.fnType(dart.dynamic, [charts.CartesianChartPoint])))(),
    JSArrayOf_StackingGroup: () => (T$.JSArrayOf_StackingGroup = dart.constFn(_interceptors.JSArray$(charts._StackingGroup)))(),
    ChartSeriesRendererTovoid: () => (T$.ChartSeriesRendererTovoid = dart.constFn(dart.fnType(dart.void, [charts.ChartSeriesRenderer])))(),
    CartesianSeriesN: () => (T$.CartesianSeriesN = dart.constFn(dart.nullable(charts.CartesianSeries)))(),
    ListOfdoubleN: () => (T$.ListOfdoubleN = dart.constFn(core.List$(T$.doubleN())))(),
    SplineTypeN: () => (T$.SplineTypeN = dart.constFn(dart.nullable(charts.SplineType)))(),
    intToNdynamic: () => (T$.intToNdynamic = dart.constFn(dart.nullable(T$.intTodynamic())))(),
    intToNnumN: () => (T$.intToNnumN = dart.constFn(dart.nullable(T$.intTonumN())))(),
    intToNboolN: () => (T$.intToNboolN = dart.constFn(dart.nullable(T$.intToboolN())))(),
    intToNColorN: () => (T$.intToNColorN = dart.constFn(dart.nullable(T$.intToColorN())))(),
    intToNStringN: () => (T$.intToNStringN = dart.constFn(dart.nullable(T$.intToStringN())))(),
    dynamicTobool: () => (T$.dynamicTobool = dart.constFn(dart.fnType(core.bool, [dart.dynamic])))(),
    PointOfdouble: () => (T$.PointOfdouble = dart.constFn(math.Point$(core.double)))(),
    CircularSeriesRendererTovoid: () => (T$.CircularSeriesRendererTovoid = dart.constFn(dart.fnType(dart.void, [charts.CircularSeriesRenderer])))(),
    ListOf_ChartTemplateInfo: () => (T$.ListOf_ChartTemplateInfo = dart.constFn(core.List$(charts._ChartTemplateInfo)))()
  };
  var S = {
    title: dart.privateName(charts, "SfCircularChart.title"),
    series: dart.privateName(charts, "SfCircularChart.series"),
    margin: dart.privateName(charts, "SfCircularChart.margin"),
    legend: dart.privateName(charts, "SfCircularChart.legend"),
    tooltipBehavior: dart.privateName(charts, "SfCircularChart.tooltipBehavior"),
    backgroundColor: dart.privateName(charts, "SfCircularChart.backgroundColor"),
    annotations: dart.privateName(charts, "SfCircularChart.annotations"),
    borderColor: dart.privateName(charts, "SfCircularChart.borderColor"),
    borderWidth: dart.privateName(charts, "SfCircularChart.borderWidth"),
    backgroundImage: dart.privateName(charts, "SfCircularChart.backgroundImage"),
    centerX: dart.privateName(charts, "SfCircularChart.centerX"),
    centerY: dart.privateName(charts, "SfCircularChart.centerY"),
    onLegendItemRender: dart.privateName(charts, "SfCircularChart.onLegendItemRender"),
    onTooltipRender: dart.privateName(charts, "SfCircularChart.onTooltipRender"),
    onDataLabelRender: dart.privateName(charts, "SfCircularChart.onDataLabelRender"),
    onPointTapped: dart.privateName(charts, "SfCircularChart.onPointTapped"),
    onCreateShader: dart.privateName(charts, "SfCircularChart.onCreateShader"),
    onDataLabelTapped: dart.privateName(charts, "SfCircularChart.onDataLabelTapped"),
    onLegendTapped: dart.privateName(charts, "SfCircularChart.onLegendTapped"),
    onSelectionChanged: dart.privateName(charts, "SfCircularChart.onSelectionChanged"),
    onChartTouchInteractionUp: dart.privateName(charts, "SfCircularChart.onChartTouchInteractionUp"),
    onChartTouchInteractionDown: dart.privateName(charts, "SfCircularChart.onChartTouchInteractionDown"),
    onChartTouchInteractionMove: dart.privateName(charts, "SfCircularChart.onChartTouchInteractionMove"),
    palette: dart.privateName(charts, "SfCircularChart.palette"),
    selectionGesture: dart.privateName(charts, "SfCircularChart.selectionGesture"),
    enableMultiSelection: dart.privateName(charts, "SfCircularChart.enableMultiSelection"),
    Color_value: dart.privateName(ui, "Color.value"),
    EdgeInsets_bottom: dart.privateName(edge_insets, "EdgeInsets.bottom"),
    EdgeInsets_right: dart.privateName(edge_insets, "EdgeInsets.right"),
    EdgeInsets_top: dart.privateName(edge_insets, "EdgeInsets.top"),
    EdgeInsets_left: dart.privateName(edge_insets, "EdgeInsets.left"),
    __SfCircularChartState__controllerList: dart.privateName(charts, "_#SfCircularChartState#_controllerList"),
    __SfCircularChartState__animationController: dart.privateName(charts, "_#SfCircularChartState#_animationController"),
    __SfCircularChartState__annotationController: dart.privateName(charts, "_#SfCircularChartState#_annotationController"),
    __SfCircularChartState__seriesRepaintNotifier: dart.privateName(charts, "_#SfCircularChartState#_seriesRepaintNotifier"),
    __SfCircularChartState__legendWidgetContext: dart.privateName(charts, "_#SfCircularChartState#_legendWidgetContext"),
    __SfCircularChartState__templates: dart.privateName(charts, "_#SfCircularChartState#_templates"),
    _chartWidgets: dart.privateName(charts, "_chartWidgets"),
    __SfCircularChartState__chartTheme: dart.privateName(charts, "_#SfCircularChartState#_chartTheme"),
    __SfCircularChartState__centerLocation: dart.privateName(charts, "_#SfCircularChartState#_centerLocation"),
    __SfCircularChartState__chartContainerRect: dart.privateName(charts, "_#SfCircularChartState#_chartContainerRect"),
    __SfCircularChartState__chartAreaRect: dart.privateName(charts, "_#SfCircularChartState#_chartAreaRect"),
    __SfCircularChartState__animateCompleted: dart.privateName(charts, "_#SfCircularChartState#_animateCompleted"),
    __SfCircularChartState__explodedPoints: dart.privateName(charts, "_#SfCircularChartState#_explodedPoints"),
    __SfCircularChartState__legendToggleStates: dart.privateName(charts, "_#SfCircularChartState#_legendToggleStates"),
    __SfCircularChartState__legendToggleTemplateStates: dart.privateName(charts, "_#SfCircularChartState#_legendToggleTemplateStates"),
    _initialRender: dart.privateName(charts, "_initialRender"),
    __SfCircularChartState__selectedDataPoints: dart.privateName(charts, "_#SfCircularChartState#_selectedDataPoints"),
    __SfCircularChartState__unselectedDataPoints: dart.privateName(charts, "_#SfCircularChartState#_unselectedDataPoints"),
    __SfCircularChartState__selectedRegions: dart.privateName(charts, "_#SfCircularChartState#_selectedRegions"),
    __SfCircularChartState__unselectedRegions: dart.privateName(charts, "_#SfCircularChartState#_unselectedRegions"),
    __SfCircularChartState__dataLabelTemplateRegions: dart.privateName(charts, "_#SfCircularChartState#_dataLabelTemplateRegions"),
    __SfCircularChartState__annotationRegions: dart.privateName(charts, "_#SfCircularChartState#_annotationRegions"),
    _chartTemplate: dart.privateName(charts, "_chartTemplate"),
    _currentActive: dart.privateName(charts, "_currentActive"),
    _tapPosition: dart.privateName(charts, "_tapPosition"),
    _renderDataLabel: dart.privateName(charts, "_renderDataLabel"),
    __SfCircularChartState__widgetNeedUpdate: dart.privateName(charts, "_#SfCircularChartState#_widgetNeedUpdate"),
    __SfCircularChartState__isLegendToggled: dart.privateName(charts, "_#SfCircularChartState#_isLegendToggled"),
    _prevSeriesRenderer: dart.privateName(charts, "_prevSeriesRenderer"),
    _oldPoints: dart.privateName(charts, "_oldPoints"),
    __SfCircularChartState__selectionData: dart.privateName(charts, "_#SfCircularChartState#_selectionData"),
    __SfCircularChartState__chartElementAnimation: dart.privateName(charts, "_#SfCircularChartState#_chartElementAnimation"),
    _oldDeviceOrientation: dart.privateName(charts, "_oldDeviceOrientation"),
    __SfCircularChartState__deviceOrientation: dart.privateName(charts, "_#SfCircularChartState#_deviceOrientation"),
    _seriesRenderer: dart.privateName(charts, "_seriesRenderer"),
    _prevSize: dart.privateName(charts, "_prevSize"),
    _didSizeChange: dart.privateName(charts, "_didSizeChange"),
    __SfCircularChartState__chartLegend: dart.privateName(charts, "_#SfCircularChartState#_chartLegend"),
    __SfCircularChartState__chartSeries: dart.privateName(charts, "_#SfCircularChartState#_chartSeries"),
    __SfCircularChartState__circularArea: dart.privateName(charts, "_#SfCircularChartState#_circularArea"),
    __SfCircularChartState__needToMoveFromCenter: dart.privateName(charts, "_#SfCircularChartState#_needToMoveFromCenter"),
    __SfCircularChartState__needExplodeAll: dart.privateName(charts, "_#SfCircularChartState#_needExplodeAll"),
    __SfCircularChartState__tooltipBehaviorRenderer: dart.privateName(charts, "_#SfCircularChartState#_tooltipBehaviorRenderer"),
    __SfCircularChartState__legendRenderer: dart.privateName(charts, "_#SfCircularChartState#_legendRenderer"),
    _isToggled: dart.privateName(charts, "_isToggled"),
    _controllerList: dart.privateName(charts, "_controllerList"),
    _animationController: dart.privateName(charts, "_animationController"),
    _annotationController: dart.privateName(charts, "_annotationController"),
    _seriesRepaintNotifier: dart.privateName(charts, "_seriesRepaintNotifier"),
    _legendWidgetContext: dart.privateName(charts, "_legendWidgetContext"),
    _templates: dart.privateName(charts, "_templates"),
    _chartTheme: dart.privateName(charts, "_chartTheme"),
    _centerLocation: dart.privateName(charts, "_centerLocation"),
    _chartContainerRect: dart.privateName(charts, "_chartContainerRect"),
    _chartAreaRect: dart.privateName(charts, "_chartAreaRect"),
    _animateCompleted: dart.privateName(charts, "_animateCompleted"),
    _explodedPoints: dart.privateName(charts, "_explodedPoints"),
    _legendToggleStates: dart.privateName(charts, "_legendToggleStates"),
    _legendToggleTemplateStates: dart.privateName(charts, "_legendToggleTemplateStates"),
    _selectedDataPoints: dart.privateName(charts, "_selectedDataPoints"),
    _unselectedDataPoints: dart.privateName(charts, "_unselectedDataPoints"),
    _selectedRegions: dart.privateName(charts, "_selectedRegions"),
    _unselectedRegions: dart.privateName(charts, "_unselectedRegions"),
    _dataLabelTemplateRegions: dart.privateName(charts, "_dataLabelTemplateRegions"),
    _annotationRegions: dart.privateName(charts, "_annotationRegions"),
    _widgetNeedUpdate: dart.privateName(charts, "_widgetNeedUpdate"),
    _isLegendToggled: dart.privateName(charts, "_isLegendToggled"),
    _selectionData: dart.privateName(charts, "_selectionData"),
    _chartElementAnimation: dart.privateName(charts, "_chartElementAnimation"),
    _deviceOrientation: dart.privateName(charts, "_deviceOrientation"),
    _chart: dart.privateName(charts, "_chart"),
    _chartLegend: dart.privateName(charts, "_chartLegend"),
    _chartSeries: dart.privateName(charts, "_chartSeries"),
    _circularArea: dart.privateName(charts, "_circularArea"),
    _needToMoveFromCenter: dart.privateName(charts, "_needToMoveFromCenter"),
    _needExplodeAll: dart.privateName(charts, "_needExplodeAll"),
    _tooltipBehaviorRenderer: dart.privateName(charts, "_tooltipBehaviorRenderer"),
    _legendRenderer: dart.privateName(charts, "_legendRenderer"),
    _animationCompleted: dart.privateName(charts, "_animationCompleted"),
    _initializeDefaultValues: dart.privateName(charts, "_initializeDefaultValues"),
    _createAndUpdateSeriesRenderer: dart.privateName(charts, "_createAndUpdateSeriesRenderer"),
    $isNotEmpty: dartx.isNotEmpty,
    $_get: dartx._get,
    $clear: dartx.clear,
    _chartTooltipState: dart.privateName(charts, "_chartTooltipState"),
    _show: dart.privateName(charts, "_show"),
    _renderChartElements: dart.privateName(charts, "_renderChartElements"),
    _Location_parameterLocations: dart.privateName(widget_inspector, "_Location.parameterLocations"),
    _Location_name: dart.privateName(widget_inspector, "_Location.name"),
    _Location_column: dart.privateName(widget_inspector, "_Location.column"),
    _Location_line: dart.privateName(widget_inspector, "_Location.line"),
    _Location_file: dart.privateName(widget_inspector, "_Location.file"),
    _repaintChartElements: dart.privateName(charts, "_repaintChartElements"),
    _chartState: dart.privateName(charts, "_chartState"),
    _series: dart.privateName(charts, "_series"),
    _controller: dart.privateName(charts, "_controller"),
    _oldRenderPoints: dart.privateName(charts, "_oldRenderPoints"),
    _renderPoints: dart.privateName(charts, "_renderPoints"),
    $addAll: dartx.addAll,
    _isSelectionEnable: dart.privateName(charts, "_isSelectionEnable"),
    $add: dartx.add,
    $length: dartx.length,
    $_set: dartx._set,
    _redraw: dart.privateName(charts, "_redraw"),
    _refresh: dart.privateName(charts, "_refresh"),
    _initialize: dart.privateName(charts, "_initialize"),
    _findVisibleSeries: dart.privateName(charts, "_findVisibleSeries"),
    _processDataPoints: dart.privateName(charts, "_processDataPoints"),
    $isEmpty: dartx.isEmpty,
    _calculateLegendBounds: dart.privateName(charts, "_calculateLegendBounds"),
    _legendPosition: dart.privateName(charts, "_legendPosition"),
    ___CircularArea_renderBox: dart.privateName(charts, "_#_CircularArea#renderBox"),
    ___CircularArea_tapDownDetails: dart.privateName(charts, "_#_CircularArea#tapDownDetails"),
    ___CircularArea_doubleTapPosition: dart.privateName(charts, "_#_CircularArea#doubleTapPosition"),
    ___CircularArea_doubleTapPosition_isSet: dart.privateName(charts, "_#_CircularArea#doubleTapPosition#isSet"),
    _enableMouseHover: dart.privateName(charts, "_enableMouseHover"),
    _onHover: dart.privateName(charts, "_onHover"),
    _isHovering: dart.privateName(charts, "_isHovering"),
    _onTapUp: dart.privateName(charts, "_onTapUp"),
    _onTapDown: dart.privateName(charts, "_onTapDown"),
    _performPointerMove: dart.privateName(charts, "_performPointerMove"),
    _onLongPress: dart.privateName(charts, "_onLongPress"),
    _calculatePointSeriesIndex: dart.privateName(charts, "_calculatePointSeriesIndex"),
    _onDoubleTap: dart.privateName(charts, "_onDoubleTap"),
    _initializeChart: dart.privateName(charts, "_initializeChart"),
    _name: dart.privateName(box_border, "_name"),
    BoxDecoration_shape: dart.privateName(box_decoration, "BoxDecoration.shape"),
    BoxDecoration_backgroundBlendMode: dart.privateName(box_decoration, "BoxDecoration.backgroundBlendMode"),
    BoxDecoration_gradient: dart.privateName(box_decoration, "BoxDecoration.gradient"),
    BoxDecoration_boxShadow: dart.privateName(box_decoration, "BoxDecoration.boxShadow"),
    BoxDecoration_borderRadius: dart.privateName(box_decoration, "BoxDecoration.borderRadius"),
    BoxDecoration_border: dart.privateName(box_decoration, "BoxDecoration.border"),
    BoxDecoration_image: dart.privateName(box_decoration, "BoxDecoration.image"),
    BoxDecoration_color: dart.privateName(box_decoration, "BoxDecoration.color"),
    _dataPoints: dart.privateName(charts, "_dataPoints"),
    _hideOnTimer: dart.privateName(charts, "_hideOnTimer"),
    _seriesPointExplosion: dart.privateName(charts, "_seriesPointExplosion"),
    _seriesPointSelection: dart.privateName(charts, "_seriesPointSelection"),
    _showCircularTooltipTemplate: dart.privateName(charts, "_showCircularTooltipTemplate"),
    $toDouble: dartx.toDouble,
    _hide: dart.privateName(charts, "_hide"),
    _timer: dart.privateName(charts, "_timer"),
    _prevTooltipValue: dart.privateName(charts, "_prevTooltipValue"),
    _currentTooltipValue: dart.privateName(charts, "_currentTooltipValue"),
    _showLocation: dart.privateName(charts, "_showLocation"),
    _renderBox: dart.privateName(charts, "_renderBox"),
    _tooltipBounds: dart.privateName(charts, "_tooltipBounds"),
    _tooltipTemplate: dart.privateName(charts, "_tooltipTemplate"),
    $toInt: dartx.toInt,
    _hideTooltipTemplate: dart.privateName(charts, "_hideTooltipTemplate"),
    _performTooltip: dart.privateName(charts, "_performTooltip"),
    _calculateContainerSize: dart.privateName(charts, "_calculateContainerSize"),
    _calculateAngleAndCenterPositions: dart.privateName(charts, "_calculateAngleAndCenterPositions"),
    _renderWidgets: dart.privateName(charts, "_renderWidgets"),
    _bindSeriesWidgets: dart.privateName(charts, "_bindSeriesWidgets"),
    _findTemplates: dart.privateName(charts, "_findTemplates"),
    _renderTemplates: dart.privateName(charts, "_renderTemplates"),
    _bindTooltipWidgets: dart.privateName(charts, "_bindTooltipWidgets"),
    _chartTooltip: dart.privateName(charts, "_chartTooltip"),
    _tooltipRenderingEvent: dart.privateName(charts, "_tooltipRenderingEvent"),
    _selectionBehavior: dart.privateName(charts, "_selectionBehavior"),
    _selectionBehaviorRenderer: dart.privateName(charts, "_selectionBehaviorRenderer"),
    _selectionRenderer: dart.privateName(charts, "_selectionRenderer"),
    _needsAnimation: dart.privateName(charts, "_needsAnimation"),
    Interval_curve: dart.privateName(curves, "Interval.curve"),
    Interval_end: dart.privateName(curves, "Interval.end"),
    Interval_begin: dart.privateName(curves, "Interval.begin"),
    _repaintNotifier: dart.privateName(charts, "_repaintNotifier"),
    _seriesType: dart.privateName(charts, "_seriesType"),
    _needsRepaint: dart.privateName(charts, "_needsRepaint"),
    ___CircularSeries_currentSeries: dart.privateName(charts, "_#_CircularSeries#currentSeries"),
    ___CircularSeries_size: dart.privateName(charts, "_#_CircularSeries#size"),
    ___CircularSeries_sumOfGroup: dart.privateName(charts, "_#_CircularSeries#sumOfGroup"),
    ___CircularSeries_explodedRegion: dart.privateName(charts, "_#_CircularSeries#explodedRegion"),
    ___CircularSeries_selectRegion: dart.privateName(charts, "_#_CircularSeries#selectRegion"),
    _setSeriesType: dart.privateName(charts, "_setSeriesType"),
    _sortDataSource: dart.privateName(charts, "_sortDataSource"),
    _calculateCircularEmptyPoints: dart.privateName(charts, "_calculateCircularEmptyPoints"),
    _findingGroupPoints: dart.privateName(charts, "_findingGroupPoints"),
    $sort: dartx.sort,
    $toString: dartx.toString,
    $abs: dartx.abs,
    _setPointStyle: dart.privateName(charts, "_setPointStyle"),
    $modulo: dartx['%'],
    _findSumOfPoints: dart.privateName(charts, "_findSumOfPoints"),
    _calculateAngle: dart.privateName(charts, "_calculateAngle"),
    _calculateRadius: dart.privateName(charts, "_calculateRadius"),
    _calculateOrigin: dart.privateName(charts, "_calculateOrigin"),
    _calculateStartAndEndAngle: dart.privateName(charts, "_calculateStartAndEndAngle"),
    _calculateCenterPosition: dart.privateName(charts, "_calculateCenterPosition"),
    _currentRadius: dart.privateName(charts, "_currentRadius"),
    _center: dart.privateName(charts, "_center"),
    _start: dart.privateName(charts, "_start"),
    _end: dart.privateName(charts, "_end"),
    _totalAngle: dart.privateName(charts, "_totalAngle"),
    _rect: dart.privateName(charts, "_rect"),
    _currentInnerRadius: dart.privateName(charts, "_currentInnerRadius"),
    _sumOfPoints: dart.privateName(charts, "_sumOfPoints"),
    _calculatePointRadius: dart.privateName(charts, "_calculatePointRadius"),
    _needExplode: dart.privateName(charts, "_needExplode"),
    _findExplodeCenter: dart.privateName(charts, "_findExplodeCenter"),
    $contains: dartx.contains,
    $removeAt: dartx.removeAt,
    _getSelectionEventArgs: dart.privateName(charts, "_getSelectionEventArgs"),
    _selectionArgs: dart.privateName(charts, "_selectionArgs"),
    $indexOf: dartx.indexOf,
    opacity: dart.privateName(charts, "CircularSeries.opacity"),
    dataLabelSettings: dart.privateName(charts, "CircularSeries.dataLabelSettings"),
    dataSource: dart.privateName(charts, "CircularSeries.dataSource"),
    xValueMapper: dart.privateName(charts, "CircularSeries.xValueMapper"),
    yValueMapper: dart.privateName(charts, "CircularSeries.yValueMapper"),
    pointColorMapper: dart.privateName(charts, "CircularSeries.pointColorMapper"),
    pointShaderMapper: dart.privateName(charts, "CircularSeries.pointShaderMapper"),
    pointRadiusMapper: dart.privateName(charts, "CircularSeries.pointRadiusMapper"),
    dataLabelMapper: dart.privateName(charts, "CircularSeries.dataLabelMapper"),
    sortFieldValueMapper: dart.privateName(charts, "CircularSeries.sortFieldValueMapper"),
    enableSmartLabels: dart.privateName(charts, "CircularSeries.enableSmartLabels"),
    legendIconType: dart.privateName(charts, "CircularSeries.legendIconType"),
    sortingOrder: dart.privateName(charts, "CircularSeries.sortingOrder"),
    enableTooltip: dart.privateName(charts, "CircularSeries.enableTooltip"),
    borderWidth$1: dart.privateName(charts, "CircularSeries.borderWidth"),
    borderColor$1: dart.privateName(charts, "CircularSeries.borderColor"),
    emptyPointSettings: dart.privateName(charts, "CircularSeries.emptyPointSettings"),
    selectionSettings: dart.privateName(charts, "CircularSeries.selectionSettings"),
    selectionBehavior: dart.privateName(charts, "CircularSeries.selectionBehavior"),
    startAngle: dart.privateName(charts, "CircularSeries.startAngle"),
    endAngle: dart.privateName(charts, "CircularSeries.endAngle"),
    radius: dart.privateName(charts, "CircularSeries.radius"),
    innerRadius: dart.privateName(charts, "CircularSeries.innerRadius"),
    explode: dart.privateName(charts, "CircularSeries.explode"),
    explodeAll: dart.privateName(charts, "CircularSeries.explodeAll"),
    explodeIndex: dart.privateName(charts, "CircularSeries.explodeIndex"),
    explodeOffset: dart.privateName(charts, "CircularSeries.explodeOffset"),
    explodeGesture: dart.privateName(charts, "CircularSeries.explodeGesture"),
    groupTo: dart.privateName(charts, "CircularSeries.groupTo"),
    groupMode: dart.privateName(charts, "CircularSeries.groupMode"),
    pointRenderMode: dart.privateName(charts, "CircularSeries.pointRenderMode"),
    gap: dart.privateName(charts, "CircularSeries.gap"),
    cornerStyle: dart.privateName(charts, "CircularSeries.cornerStyle"),
    name: dart.privateName(charts, "CircularSeries.name"),
    animationDuration: dart.privateName(charts, "CircularSeries.animationDuration"),
    initialSelectedDataIndexes: dart.privateName(charts, "CircularSeries.initialSelectedDataIndexes"),
    key: dart.privateName(charts, "CircularSeries.key"),
    onCreateRenderer: dart.privateName(charts, "CircularSeries.onCreateRenderer"),
    onRendererCreated: dart.privateName(charts, "CircularSeries.onRendererCreated"),
    _renderer: dart.privateName(charts, "_renderer"),
    _name$1: dart.privateName(charts, "_name"),
    dataSource$1: dart.privateName(charts, "ChartSeries.dataSource"),
    xValueMapper$1: dart.privateName(charts, "ChartSeries.xValueMapper"),
    yValueMapper$1: dart.privateName(charts, "ChartSeries.yValueMapper"),
    pointColorMapper$1: dart.privateName(charts, "ChartSeries.pointColorMapper"),
    dataLabelMapper$1: dart.privateName(charts, "ChartSeries.dataLabelMapper"),
    emptyPointSettings$1: dart.privateName(charts, "ChartSeries.emptyPointSettings"),
    dataLabelSettings$1: dart.privateName(charts, "ChartSeries.dataLabelSettings"),
    name$1: dart.privateName(charts, "ChartSeries.name"),
    enableTooltip$1: dart.privateName(charts, "ChartSeries.enableTooltip"),
    animationDuration$1: dart.privateName(charts, "ChartSeries.animationDuration"),
    borderColor$2: dart.privateName(charts, "ChartSeries.borderColor"),
    borderWidth$2: dart.privateName(charts, "ChartSeries.borderWidth"),
    legendItemText: dart.privateName(charts, "ChartSeries.legendItemText"),
    legendIconType$1: dart.privateName(charts, "ChartSeries.legendIconType"),
    selectionSettings$1: dart.privateName(charts, "ChartSeries.selectionSettings"),
    selectionBehavior$1: dart.privateName(charts, "ChartSeries.selectionBehavior"),
    opacity$1: dart.privateName(charts, "ChartSeries.opacity"),
    sortFieldValueMapper$1: dart.privateName(charts, "ChartSeries.sortFieldValueMapper"),
    sortingOrder$1: dart.privateName(charts, "ChartSeries.sortingOrder"),
    isVisible: dart.privateName(charts, "ChartSeries.isVisible"),
    _center$1: dart.privateName(charts, "CircularSeriesRenderer._center"),
    __CircularSeriesRenderer__series: dart.privateName(charts, "_#CircularSeriesRenderer#_series"),
    __CircularSeriesRenderer__seriesType: dart.privateName(charts, "_#CircularSeriesRenderer#_seriesType"),
    __CircularSeriesRenderer__dataPoints: dart.privateName(charts, "_#CircularSeriesRenderer#_dataPoints"),
    __CircularSeriesRenderer__sumOfPoints: dart.privateName(charts, "_#CircularSeriesRenderer#_sumOfPoints"),
    __CircularSeriesRenderer__start: dart.privateName(charts, "_#CircularSeriesRenderer#_start"),
    __CircularSeriesRenderer__end: dart.privateName(charts, "_#CircularSeriesRenderer#_end"),
    __CircularSeriesRenderer__totalAngle: dart.privateName(charts, "_#CircularSeriesRenderer#_totalAngle"),
    __CircularSeriesRenderer__currentRadius: dart.privateName(charts, "_#CircularSeriesRenderer#_currentRadius"),
    __CircularSeriesRenderer__currentInnerRadius: dart.privateName(charts, "_#CircularSeriesRenderer#_currentInnerRadius"),
    __CircularSeriesRenderer__pointRegions: dart.privateName(charts, "_#CircularSeriesRenderer#_pointRegions"),
    __CircularSeriesRenderer__rect: dart.privateName(charts, "_#CircularSeriesRenderer#_rect"),
    _renderPaths: dart.privateName(charts, "_renderPaths"),
    _renderList: dart.privateName(charts, "_renderList"),
    _innerRadialradius: dart.privateName(charts, "_innerRadialradius"),
    __CircularSeriesRenderer__needsAnimation: dart.privateName(charts, "_#CircularSeriesRenderer#_needsAnimation"),
    __CircularSeriesRenderer__chartState: dart.privateName(charts, "_#CircularSeriesRenderer#_chartState"),
    __CircularSeriesRenderer__repaintNotifier: dart.privateName(charts, "_#CircularSeriesRenderer#_repaintNotifier"),
    __CircularSeriesRenderer__dataLabelSettingsRenderer: dart.privateName(charts, "_#CircularSeriesRenderer#_dataLabelSettingsRenderer"),
    __CircularSeriesRenderer__selectionBehaviorRenderer: dart.privateName(charts, "_#CircularSeriesRenderer#_selectionBehaviorRenderer"),
    _pointRegions: dart.privateName(charts, "_pointRegions"),
    _dataLabelSettingsRenderer: dart.privateName(charts, "_dataLabelSettingsRenderer"),
    _selectPoint: dart.privateName(charts, "_selectPoint"),
    $round: dartx.round,
    _calculatePath: dart.privateName(charts, "_calculatePath"),
    _circularRenderPoint: dart.privateName(charts, "_circularRenderPoint"),
    _drawDataPoints: dart.privateName(charts, "_drawDataPoints"),
    $last: dartx.last,
    _pathRect: dart.privateName(charts, "_pathRect"),
    _seriesName: dart.privateName(charts, "_seriesName"),
    _visible: dart.privateName(charts, "_visible"),
    __ChartSeriesRenderer__chart: dart.privateName(charts, "_#ChartSeriesRenderer#_chart"),
    __CircularSeriesController_seriesRenderer: dart.privateName(charts, "_#CircularSeriesController#seriesRenderer"),
    _removeDataPointsList: dart.privateName(charts, "_removeDataPointsList"),
    _removeDataPoint: dart.privateName(charts, "_removeDataPoint"),
    _addOrUpdateDataPoints: dart.privateName(charts, "_addOrUpdateDataPoints"),
    _addOrUpdateDataPoint: dart.privateName(charts, "_addOrUpdateDataPoint"),
    _updateCircularSeries: dart.privateName(charts, "_updateCircularSeries"),
    $insert: dartx.insert,
    $toSet: dartx.toSet,
    $toList: dartx.toList,
    $compareTo: dartx.compareTo,
    x: dart.privateName(charts, "ChartPoint.x"),
    y: dart.privateName(charts, "ChartPoint.y"),
    degree: dart.privateName(charts, "ChartPoint.degree"),
    startAngle$1: dart.privateName(charts, "ChartPoint.startAngle"),
    endAngle$1: dart.privateName(charts, "ChartPoint.endAngle"),
    midAngle: dart.privateName(charts, "ChartPoint.midAngle"),
    center: dart.privateName(charts, "ChartPoint.center"),
    text: dart.privateName(charts, "ChartPoint.text"),
    sortValue: dart.privateName(charts, "ChartPoint.sortValue"),
    innerRadius$1: dart.privateName(charts, "ChartPoint.innerRadius"),
    outerRadius: dart.privateName(charts, "ChartPoint.outerRadius"),
    isExplode: dart.privateName(charts, "ChartPoint.isExplode"),
    isShadow: dart.privateName(charts, "ChartPoint.isShadow"),
    isEmpty: dart.privateName(charts, "ChartPoint.isEmpty"),
    isVisible$1: dart.privateName(charts, "ChartPoint.isVisible"),
    isSelected: dart.privateName(charts, "ChartPoint.isSelected"),
    renderPosition: dart.privateName(charts, "ChartPoint.renderPosition"),
    dataLabelSize: dart.privateName(charts, "ChartPoint.dataLabelSize"),
    saturationRegionOutside: dart.privateName(charts, "ChartPoint.saturationRegionOutside"),
    radius$1: dart.privateName(charts, "ChartPoint.radius"),
    pointColor: dart.privateName(charts, "ChartPoint.pointColor"),
    isTooltipRenderEvent: dart.privateName(charts, "ChartPoint.isTooltipRenderEvent"),
    labelRenderEvent: dart.privateName(charts, "ChartPoint.labelRenderEvent"),
    __ChartPoint_fill: dart.privateName(charts, "_#ChartPoint#fill"),
    __ChartPoint_color: dart.privateName(charts, "_#ChartPoint#color"),
    __ChartPoint_strokeColor: dart.privateName(charts, "_#ChartPoint#strokeColor"),
    __ChartPoint_strokeWidth: dart.privateName(charts, "_#ChartPoint#strokeWidth"),
    __ChartPoint_dataLabelPosition: dart.privateName(charts, "_#ChartPoint#dataLabelPosition"),
    __ChartPoint_labelRect: dart.privateName(charts, "_#ChartPoint#labelRect"),
    OffsetBase__dy: dart.privateName(ui, "OffsetBase._dy"),
    OffsetBase__dx: dart.privateName(ui, "OffsetBase._dx"),
    __ChartPoint_yRatio: dart.privateName(charts, "_#ChartPoint#yRatio"),
    __ChartPoint_heightRatio: dart.privateName(charts, "_#ChartPoint#heightRatio"),
    __ChartPoint_index: dart.privateName(charts, "_#ChartPoint#index"),
    _data: dart.privateName(charts, "_data"),
    _pointShaderMapper: dart.privateName(charts, "_pointShaderMapper"),
    __ChartPoint__tooltipLabelText: dart.privateName(charts, "_#ChartPoint#_tooltipLabelText"),
    __ChartPoint__tooltipHeaderText: dart.privateName(charts, "_#ChartPoint#_tooltipHeaderText"),
    _tooltipLabelText: dart.privateName(charts, "_tooltipLabelText"),
    _tooltipHeaderText: dart.privateName(charts, "_tooltipHeaderText"),
    length: dart.privateName(charts, "ConnectorLineSettings.length"),
    width: dart.privateName(charts, "ConnectorLineSettings.width"),
    color: dart.privateName(charts, "ConnectorLineSettings.color"),
    type: dart.privateName(charts, "ConnectorLineSettings.type"),
    angle: dart.privateName(charts, "CircularChartAnnotation.angle"),
    radius$2: dart.privateName(charts, "CircularChartAnnotation.radius"),
    widget: dart.privateName(charts, "CircularChartAnnotation.widget"),
    height: dart.privateName(charts, "CircularChartAnnotation.height"),
    width$1: dart.privateName(charts, "CircularChartAnnotation.width"),
    horizontalAlignment: dart.privateName(charts, "CircularChartAnnotation.horizontalAlignment"),
    verticalAlignment: dart.privateName(charts, "CircularChartAnnotation.verticalAlignment"),
    ___CircularDataLabelRenderer_state: dart.privateName(charts, "_#_CircularDataLabelRenderer#state"),
    ___CircularDataLabelRendererState_animationControllersList: dart.privateName(charts, "_#_CircularDataLabelRendererState#animationControllersList"),
    ___CircularDataLabelRendererState_animationController: dart.privateName(charts, "_#_CircularDataLabelRendererState#animationController"),
    ___CircularDataLabelRendererSta