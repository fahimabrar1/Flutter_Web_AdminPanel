define(['dart_sdk', 'packages/syncfusion_flutter_charts/src/sparkline/renderers/renderer_base.dart', 'packages/flutter/src/rendering/layer.dart', 'packages/flutter/src/widgets/widget_span.dart', 'packages/syncfusion_flutter_charts/src/sparkline/utils/enum.dart', 'packages/flutter/src/painting/strut_style.dart', 'packages/flutter/src/material/colors.dart', 'packages/syncfusion_flutter_charts/src/sparkline/utils/helper.dart'], (function load__packages__syncfusion_flutter_charts__src__sparkline__renderers__spark_bar_renderer_dart(dart_sdk, packages__syncfusion_flutter_charts__src__sparkline__renderers__renderer_base$46dart, packages__flutter__src__rendering__layer$46dart, packages__flutter__src__widgets__widget_span$46dart, packages__syncfusion_flutter_charts__src__sparkline__utils__enum$46dart, packages__flutter__src__painting__strut_style$46dart, packages__flutter__src__material__colors$46dart, packages__syncfusion_flutter_charts__src__sparkline__utils__helper$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const ui = dart_sdk.ui;
  const _internal = dart_sdk._internal;
  const _interceptors = dart_sdk._interceptors;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const renderer_base = packages__syncfusion_flutter_charts__src__sparkline__renderers__renderer_base$46dart.src__sparkline__renderers__renderer_base;
  const object = packages__flutter__src__rendering__layer$46dart.src__rendering__object;
  const framework = packages__flutter__src__widgets__widget_span$46dart.src__widgets__framework;
  const $enum = packages__syncfusion_flutter_charts__src__sparkline__utils__enum$46dart.src__sparkline__utils__enum;
  const text_style = packages__flutter__src__painting__strut_style$46dart.src__painting__text_style;
  const colors = packages__flutter__src__material__colors$46dart.src__material__colors;
  const helper = packages__syncfusion_flutter_charts__src__sparkline__utils__helper$46dart.src__sparkline__utils__helper;
  var spark_bar_renderer = Object.create(dart.library);
  var $length = dartx.length;
  var $_get = dartx._get;
  var $toDouble = dartx.toDouble;
  var $isNotEmpty = dartx.isNotEmpty;
  var $clear = dartx.clear;
  var $toInt = dartx.toInt;
  var $abs = dartx.abs;
  var $add = dartx.add;
  var $roundToDouble = dartx.roundToDouble;
  dart._checkModuleNullSafetyMode(true);
  var T = {
    JSArrayOfRect: () => (T.JSArrayOfRect = dart.constFn(_interceptors.JSArray$(ui.Rect)))()
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
  var I = ["package:syncfusion_flutter_charts/src/sparkline/renderers/spark_bar_renderer.dart"];
  var borderWidth$ = dart.privateName(spark_bar_renderer, "SfSparkBarChartRenderObjectWidget.borderWidth");
  var borderColor$ = dart.privateName(spark_bar_renderer, "SfSparkBarChartRenderObjectWidget.borderColor");
  var labelDisplayMode$ = dart.privateName(spark_bar_renderer, "SfSparkBarChartRenderObjectWidget.labelDisplayMode");
  var labelStyle$ = dart.privateName(spark_bar_renderer, "SfSparkBarChartRenderObjectWidget.labelStyle");
  spark_bar_renderer.SfSparkBarChartRenderObjectWidget = class SfSparkBarChartRenderObjectWidget extends renderer_base.SfSparkChartRenderObjectWidget {
    get borderWidth() {
      return this[borderWidth$];
    }
    set borderWidth(value) {
      super.borderWidth = value;
    }
    get borderColor() {
      return this[borderColor$];
    }
    set borderColor(value) {
      super.borderColor = value;
    }
    get labelDisplayMode() {
      return this[labelDisplayMode$];
    }
    set labelDisplayMode(value) {
      super.labelDisplayMode = value;
    }
    get labelStyle() {
      return this[labelStyle$];
    }
    set labelStyle(value) {
      super.labelStyle = value;
    }
    createRenderObject(context) {
      return new spark_bar_renderer._RenderSparkBarChart.new({dataCount: this.dataCount, data: this.data, xValueMapper: this.xValueMapper, yValueMapper: this.yValueMapper, isInversed: this.isInversed, axisCrossesAt: this.axisCrossesAt, axisLineColor: this.axisLineColor, axisLineWidth: this.axisLineWidth, axisLineDashArray: this.axisLineDashArray, firstPointColor: this.firstPointColor, lastPointColor: this.lastPointColor, highPointColor: this.highPointColor, lowPointColor: this.lowPointColor, negativePointColor: this.negativePointColor, color: this.color, plotBand: this.plotBand, borderColor: this.borderColor, borderWidth: this.borderWidth, labelDisplayMode: this.labelDisplayMode, labelStyle: this.labelStyle, sparkChartDataDetails: this.sparkChartDataDetails, themeData: this.themeData, coordinatePoints: this.coordinatePoints, dataPoints: this.dataPoints});
    }
    updateRenderObject(context, renderObject) {
      let t0;
      spark_bar_renderer._RenderSparkBarChart.as(renderObject);
      t0 = renderObject;
      (() => {
        t0.isInversed = this.isInversed;
        t0.axisCrossesAt = dart.nullCheck(this.axisCrossesAt);
        t0.axisLineColor = this.axisLineColor;
        t0.axisLineWidth = this.axisLineWidth;
        t0.axisLineDashArray = this.axisLineDashArray;
        t0.dataCount = this.dataCount;
        t0.data = this.data;
        t0.xValueMapper = this.xValueMapper;
        t0.yValueMapper = this.yValueMapper;
        t0.firstPointColor = this.firstPointColor;
        t0.lastPointColor = this.lastPointColor;
        t0.highPointColor = this.highPointColor;
        t0.lowPointColor = this.lowPointColor;
        t0.negativePointColor = this.negativePointColor;
        t0.color = this.color;
        t0.plotBand = this.plotBand;
        t0.borderColor = this.borderColor;
        t0.borderWidth = this.borderWidth;
        t0.labelDisplayMode = this.labelDisplayMode;
        t0.labelStyle = this.labelStyle;
        t0.themeData = this.themeData;
        t0.coordinatePoints = this.coordinatePoints;
        t0.dataPoints = this.dataPoints;
        return t0;
      })();
    }
  };
  (spark_bar_renderer.SfSparkBarChartRenderObjectWidget.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let borderWidth = opts && 'borderWidth' in opts ? opts.borderWidth : null;
    let borderColor = opts && 'borderColor' in opts ? opts.borderColor : null;
    let data = opts && 'data' in opts ? opts.data : null;
    let dataCount = opts && 'dataCount' in opts ? opts.dataCount : null;
    let xValueMapper = opts && 'xValueMapper' in opts ? opts.xValueMapper : null;
    let yValueMapper = opts && 'yValueMapper' in opts ? opts.yValueMapper : null;
    let isInversed = opts && 'isInversed' in opts ? opts.isInversed : null;
    let axisCrossesAt = opts && 'axisCrossesAt' in opts ? opts.axisCrossesAt : null;
    let axisLineColor = opts && 'axisLineColor' in opts ? opts.axisLineColor : null;
    let axisLineWidth = opts && 'axisLineWidth' in opts ? opts.axisLineWidth : null;
    let axisLineDashArray = opts && 'axisLineDashArray' in opts ? opts.axisLineDashArray : null;
    let firstPointColor = opts && 'firstPointColor' in opts ? opts.firstPointColor : null;
    let lowPointColor = opts && 'lowPointColor' in opts ? opts.lowPointColor : null;
    let highPointColor = opts && 'highPointColor' in opts ? opts.highPointColor : null;
    let lastPointColor = opts && 'lastPointColor' in opts ? opts.lastPointColor : null;
    let negativePointColor = opts && 'negativePointColor' in opts ? opts.negativePointColor : null;
    let color = opts && 'color' in opts ? opts.color : null;
    let plotBand = opts && 'plotBand' in opts ? opts.plotBand : null;
    let labelDisplayMode = opts && 'labelDisplayMode' in opts ? opts.labelDisplayMode : null;
    let labelStyle = opts && 'labelStyle' in opts ? opts.labelStyle : null;
    let themeData = opts && 'themeData' in opts ? opts.themeData : null;
    let sparkChartDataDetails = opts && 'sparkChartDataDetails' in opts ? opts.sparkChartDataDetails : null;
    let coordinatePoints = opts && 'coordinatePoints' in opts ? opts.coordinatePoints : null;
    let dataPoints = opts && 'dataPoints' in opts ? opts.dataPoints : null;
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[borderWidth$] = borderWidth;
    this[borderColor$] = borderColor;
    this[labelDisplayMode$] = labelDisplayMode;
    this[labelStyle$] = labelStyle;
    spark_bar_renderer.SfSparkBarChartRenderObjectWidget.__proto__.new.call(this, {key: key, data: data, dataCount: dataCount, xValueMapper: xValueMapper, yValueMapper: yValueMapper, isInversed: isInversed, axisCrossesAt: axisCrossesAt, axisLineColor: axisLineColor, axisLineWidth: axisLineWidth, axisLineDashArray: axisLineDashArray, firstPointColor: firstPointColor, lowPointColor: lowPointColor, highPointColor: highPointColor, lastPointColor: lastPointColor, negativePointColor: negativePointColor, color: color, plotBand: plotBand, sparkChartDataDetails: sparkChartDataDetails, themeData: themeData, coordinatePoints: coordinatePoints, dataPoints: dataPoints, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = spark_bar_renderer.SfSparkBarChartRenderObjectWidget.prototype;
  dart.addTypeTests(spark_bar_renderer.SfSparkBarChartRenderObjectWidget);
  dart.addTypeCaches(spark_bar_renderer.SfSparkBarChartRenderObjectWidget);
  dart.setMethodSignature(spark_bar_renderer.SfSparkBarChartRenderObjectWidget, () => ({
    __proto__: dart.getMethods(spark_bar_renderer.SfSparkBarChartRenderObjectWidget.__proto__),
    createRenderObject: dart.fnType(object.RenderObject, [framework.BuildContext])
  }));
  dart.setLibraryUri(spark_bar_renderer.SfSparkBarChartRenderObjectWidget, I[0]);
  dart.setFieldSignature(spark_bar_renderer.SfSparkBarChartRenderObjectWidget, () => ({
    __proto__: dart.getFields(spark_bar_renderer.SfSparkBarChartRenderObjectWidget.__proto__),
    borderWidth: dart.finalFieldType(dart.nullable(core.double)),
    borderColor: dart.finalFieldType(dart.nullable(ui.Color)),
    labelDisplayMode: dart.finalFieldType(dart.nullable($enum.SparkChartLabelDisplayMode)),
    labelStyle: dart.finalFieldType(dart.nullable(text_style.TextStyle))
  }));
  var ___RenderSparkBarChart__segments = dart.privateName(spark_bar_renderer, "_#_RenderSparkBarChart#_segments");
  var ___RenderSparkBarChart__segments_isSet = dart.privateName(spark_bar_renderer, "_#_RenderSparkBarChart#_segments#isSet");
  var ___RenderSparkBarChart__lowPoint = dart.privateName(spark_bar_renderer, "_#_RenderSparkBarChart#_lowPoint");
  var ___RenderSparkBarChart__highPoint = dart.privateName(spark_bar_renderer, "_#_RenderSparkBarChart#_highPoint");
  var _borderWidth = dart.privateName(spark_bar_renderer, "_borderWidth");
  var _borderColor = dart.privateName(spark_bar_renderer, "_borderColor");
  var _labelDisplayMode = dart.privateName(spark_bar_renderer, "_labelDisplayMode");
  var _labelStyle = dart.privateName(spark_bar_renderer, "_labelStyle");
  var _axisCrossesAt = dart.privateName(spark_bar_renderer, "_axisCrossesAt");
  var _segments = dart.privateName(spark_bar_renderer, "_segments");
  var _lowPoint = dart.privateName(spark_bar_renderer, "_lowPoint");
  var _highPoint = dart.privateName(spark_bar_renderer, "_highPoint");
  var _renderBarSeries = dart.privateName(spark_bar_renderer, "_renderBarSeries");
  spark_bar_renderer._RenderSparkBarChart = class _RenderSparkBarChart extends renderer_base.RenderSparkChart {
    get borderWidth() {
      return this[_borderWidth];
    }
    set borderWidth(value) {
      if (this[_borderWidth] != value) {
        this[_borderWidth] = value;
        this.markNeedsPaint();
      }
    }
    get borderColor() {
      return this[_borderColor];
    }
    set borderColor(value) {
      if (!dart.equals(this[_borderColor], value)) {
        this[_borderColor] = value;
        this.markNeedsPaint();
      }
    }
    get labelDisplayMode() {
      return this[_labelDisplayMode];
    }
    set labelDisplayMode(value) {
      if (this[_labelDisplayMode] != value) {
        this[_labelDisplayMode] = value;
        this.markNeedsPaint();
      }
    }
    get labelStyle() {
      return this[_labelStyle];
    }
    set labelStyle(value) {
      if (!dart.equals(this[_labelStyle], value)) {
        this[_labelStyle] = value;
        this.markNeedsPaint();
      }
    }
    get axisCrossesAt() {
      return dart.nullCheck(this[_axisCrossesAt]);
    }
    set axisCrossesAt(value) {
      if (this[_axisCrossesAt] != value) {
        this[_axisCrossesAt] = dart.nullCheck(value);
        this.calculateRenderingPoints();
        this.markNeedsPaint();
      }
    }
    get [_segments]() {
      return this[___RenderSparkBarChart__segments_isSet] ? this[___RenderSparkBarChart__segments] : dart.throw(new _internal.LateError.fieldNI("_segments"));
    }
    set [_segments](t0) {
      this[___RenderSparkBarChart__segments_isSet] = true;
      this[___RenderSparkBarChart__segments] = t0;
    }
    get [_lowPoint]() {
      let t1;
      t1 = this[___RenderSparkBarChart__lowPoint];
      return t1 == null ? dart.throw(new _internal.LateError.fieldNI("_lowPoint")) : t1;
    }
    set [_lowPoint](t1) {
      this[___RenderSparkBarChart__lowPoint] = t1;
    }
    get [_highPoint]() {
      let t2;
      t2 = this[___RenderSparkBarChart__highPoint];
      return t2 == null ? dart.throw(new _internal.LateError.fieldNI("_highPoint")) : t2;
    }
    set [_highPoint](t2) {
      this[___RenderSparkBarChart__highPoint] = t2;
    }
    calculateRenderingPoints() {
      this.diffX = dart.nullCheck(this.maxX) - dart.nullCheck(this.minX);
      this.diffY = dart.nullCheck(this.maxY) - dart.nullCheck(this.minY);
      this.diffX = this.diffX === 0 ? 1.0 : this.diffX;
      this.diffY = this.diffY === 0 ? 1.0 : this.diffY;
      this[_segments] = T.JSArrayOfRect().of([]);
      let xInterval = core.double.as(dart.nullCheck(this.dataPoints)[$length] > 1 ? dart.dsend(dart.dsend(dart.nullCheck(this.dataPoints)[$_get](1).x, 'toDouble', []), '-', [dart.dsend(dart.nullCheck(this.dataPoints)[$_get](0).x, 'toDouble', [])]) : dart.nullCheck(this.dataPoints)[$length][$toDouble]());
      let axisBaseValue = dart.nullCheck(this.minY) < 0 ? this.minY : 0.0;
      let visibleXPoint = null;
      let rect = null;
      let top = null;
      let x = null;
      let y = null;
      let y2 = null;
      let columnHeight = null;
      let currentColumnHeight = null;
      let columnWidth = dart.nullCheck(this.areaSize).width / ((dart.nullCheck(this.maxX) - dart.nullCheck(this.minX)) / xInterval + 1);
      columnWidth = columnWidth - 1;
      this.diffY = dart.nullCheck(this.maxY) - dart.nullCheck(axisBaseValue);
      this.axisHeight = this.getAxisHeight();
      if (dart.nullCheck(this.coordinatePoints)[$isNotEmpty]) {
        dart.nullCheck(this.coordinatePoints)[$clear]();
      }
      for (let i = 0; i < dart.nullCheck(this.dataPoints)[$length]; i = i + 1) {
        x = core.double.as(dart.dsend(dart.nullCheck(this.dataPoints)[$_get](i).x, 'toDouble', []));
        y = core.double.as(dart.dsend(dart.nullCheck(this.dataPoints)[$_get](i).y, 'toDouble', []));
        visibleXPoint = (x - dart.nullCheck(this.minX)) / xInterval * (columnWidth + 1) + 1 / 2;
        columnHeight = dart.nullCheck(this.areaSize).height / dart.nullCheck(this.diffY) * (y - dart.notNull(axisBaseValue));
        currentColumnHeight = y === axisBaseValue && y > this.axisCrossesAt ? (dart.nullCheck(this.dataPoints)[$length] !== 1 && this.diffY !== 1 ? dart.nullCheck(this.areaSize).height / dart.nullCheck(this.diffY) * dart.notNull(axisBaseValue) : (columnHeight[$toInt]() | 1) >>> 0)[$toDouble]() : y === this.maxY && y < this.axisCrossesAt && dart.nullCheck(this.dataPoints)[$length] !== 1 && this.diffY !== 1 ? dart.nullCheck(this.areaSize).height / dart.nullCheck(this.diffY) * dart.nullCheck(this.maxY) : columnHeight;
        y2 = (dart.nullCheck(this.areaSize).height - currentColumnHeight)[$abs]();
        top = y2 > dart.nullCheck(this.axisHeight) ? dart.nullCheck(this.axisHeight) : y2;
        rect = new ui.Rect.fromLTRB(visibleXPoint, top, visibleXPoint + columnWidth, top + (y2 - dart.nullCheck(this.axisHeight))[$abs]());
        dart.nullCheck(this[_segments])[$add](rect);
        let yPoint = y >= this.axisCrossesAt ? rect.top : rect.bottom;
        dart.nullCheck(this.coordinatePoints)[$add](new ui.Offset.new(visibleXPoint + columnWidth / 2, yPoint));
      }
    }
    getAxisHeight() {
      let value = this.axisCrossesAt;
      let minimumColumnValue = dart.nullCheck(this.minY) < 0 ? dart.nullCheck(this.minY) : 0.0;
      let axisLineHeight = dart.nullCheck(this.areaSize).height - dart.nullCheck(this.areaSize).height / dart.nullCheck(this.diffY) * -dart.nullCheck(this.minY);
      axisLineHeight = dart.nullCheck(this.minY) < 0 && dart.nullCheck(this.maxY) <= 0 ? 0.0 : dart.nullCheck(this.minY) < 0 && dart.nullCheck(this.maxY) > 0 ? this.axisHeight : dart.nullCheck(this.areaSize).height;
      if (value >= minimumColumnValue && value <= dart.nullCheck(this.maxY)) {
        axisLineHeight = dart.nullCheck(this.areaSize).height - (dart.nullCheck(this.areaSize).height * ((value - minimumColumnValue) / dart.nullCheck(this.diffY)))[$roundToDouble]();
      }
      return dart.nullCheck(axisLineHeight);
    }
    calculatePlotBandPosition() {
      let t3, t3$, t3$0, t3$1;
      let height = dart.nullCheck(this.areaSize).height;
      let start = dart.notNull((t3 = dart.nullCheck(this.plotBand).start, t3 == null ? dart.nullCheck(this.minY) : t3)) < dart.nullCheck(this.minY) ? dart.nullCheck(this.minY) : (t3$ = dart.nullCheck(this.plotBand).start, t3$ == null ? dart.nullCheck(this.minY) : t3$);
      let end = dart.notNull((t3$0 = dart.nullCheck(this.plotBand).end, t3$0 == null ? dart.nullCheck(this.maxY) : t3$0)) > dart.nullCheck(this.maxY) ? dart.nullCheck(this.maxY) : (t3$1 = dart.nullCheck(this.plotBand).end, t3$1 == null ? dart.nullCheck(this.maxY) : t3$1);
      let baseValue = dart.nullCheck(this.minY) < 0 ? dart.nullCheck(this.minY) : 0.0;
      this.plotBandStartHeight = height - (height / dart.nullCheck(this.diffY) * start - baseValue);
      this.plotBandEndHeight = height - (height / dart.nullCheck(this.diffY) * end - baseValue);
    }
    [_renderBarSeries](canvas, offset) {
      let t4, t4$, t3, t3$;
      let currentColor = null;
      let paint = null;
      let strokePaint = (t3 = ui.Paint.new(), (() => {
        t3.color = (t4 = this.borderColor, t4 == null ? colors.Colors.transparent : t4);
        t3.strokeWidth = (t4$ = this.borderWidth, t4$ == null ? 0.0 : t4$);
        t3.style = ui.PaintingStyle.stroke;
        return t3;
      })());
      let size = null;
      let yPosition = null;
      let canDrawBorder = this.borderColor != null && !dart.equals(this.borderColor, colors.Colors.transparent) && this.borderWidth != null && dart.nullCheck(this.borderWidth) > 0;
      let rect = null;
      this[_highPoint] = dart.nullCheck(this.coordinatePoints)[$_get](0).dy;
      this[_lowPoint] = dart.nullCheck(this.coordinatePoints)[$_get](0).dy;
      for (let i = 0; i < dart.nullCheck(this[_segments])[$length]; i = i + 1) {
        if (this[_highPoint] < dart.nullCheck(this.coordinatePoints)[$_get](i).dy) {
          this[_highPoint] = dart.nullCheck(this.coordinatePoints)[$_get](i).dy;
        }
        if (this[_lowPoint] > dart.nullCheck(this.coordinatePoints)[$_get](i).dy) {
          this[_lowPoint] = dart.nullCheck(this.coordinatePoints)[$_get](i).dy;
        }
        rect = new ui.Rect.fromLTRB(dart.nullCheck(this[_segments])[$_get](i).left + offset.dx, dart.nullCheck(this[_segments])[$_get](i).top + offset.dy, dart.nullCheck(this[_segments])[$_get](i).right + offset.dx, dart.nullCheck(this[_segments])[$_get](i).bottom + offset.dy);
        if (dart.equals(dart.nullCheck(this.dataPoints)[$_get](i).y, this.maxY) && this.highPointColor != null) {
          currentColor = dart.nullCheck(this.highPointColor);
        } else if (dart.equals(dart.nullCheck(this.dataPoints)[$_get](i).y, this.minY) && this.lowPointColor != null) {
          currentColor = dart.nullCheck(this.lowPointColor);
        } else if (i === 0 && this.firstPointColor != null) {
          currentColor = dart.nullCheck(this.firstPointColor);
        } else if (i === dart.nullCheck(this[_segments])[$length] - 1 && this.lastPointColor != null) {
          currentColor = dart.nullCheck(this.lastPointColor);
        } else if (dart.equals(dart.dsend(dart.nullCheck(this.dataPoints)[$_get](i).y, '<', [this.axisCrossesAt]), true) && this.negativePointColor != null) {
          currentColor = dart.nullCheck(this.negativePointColor);
        } else {
          currentColor = dart.nullCheck(this.color);
        }
        dart.nullCheck(this.dataPoints)[$_get](i).color = currentColor;
        paint = (t3$ = ui.Paint.new(), (() => {
          t3$.color = currentColor;
          return t3$;
        })());
        canvas.drawRect(rect, paint);
        if (canDrawBorder) {
          canvas.drawRect(rect, strokePaint);
        }
        if (this.labelDisplayMode !== $enum.SparkChartLabelDisplayMode.none && this.labelStyle != null) {
          size = helper.getTextSize(dart.nullCheck(this.dataLabels)[$_get](i), dart.nullCheck(this.labelStyle));
          yPosition = dart.equals(dart.dsend(dart.nullCheck(this.dataPoints)[$_get](i).y, '>', [0]), true) ? dart.nullCheck(this[_segments])[$_get](i).topCenter.dy + offset.dy - size.height : dart.nullCheck(this[_segments])[$_get](i).bottomCenter.dy + offset.dy;
          dart.nullCheck(this.dataPoints)[$_get](i).dataLabelOffset = new ui.Offset.new(offset.dx + dart.nullCheck(this[_segments])[$_get](i).topCenter.dx - size.width / 2, yPosition);
          if (dart.nullCheck(dart.nullCheck(this.dataPoints)[$_get](i).dataLabelOffset).dy <= offset.dy) {
            dart.nullCheck(this.dataPoints)[$_get](i).dataLabelOffset = new ui.Offset.new(dart.nullCheck(dart.nullCheck(this.dataPoints)[$_get](i).dataLabelOffset).dx, offset.dy + size.height);
          }
          if (dart.nullCheck(dart.nullCheck(this.dataPoints)[$_get](i).dataLabelOffset).dy >= offset.dy + dart.nullCheck(this.areaSize).height) {
            dart.nullCheck(this.dataPoints)[$_get](i).dataLabelOffset = new ui.Offset.new(dart.nullCheck(dart.nullCheck(this.dataPoints)[$_get](i).dataLabelOffset).dx, offset.dy + dart.nullCheck(this.areaSize).height - size.height);
          }
        }
      }
    }
    paint(context, offset) {
      super.paint(context, offset);
      if (this.coordinatePoints != null && dart.nullCheck(this.coordinatePoints)[$isNotEmpty] && this.dataPoints != null && dart.nullCheck(this.dataPoints)[$isNotEmpty]) {
        this[_renderBarSeries](context.canvas, offset);
        if (this.labelDisplayMode != null && this.labelDisplayMode !== $enum.SparkChartLabelDisplayMode.none) {
          helper.renderDataLabel(context.canvas, dart.nullCheck(this.dataLabels), dart.nullCheck(this.dataPoints), dart.nullCheck(this.coordinatePoints), dart.nullCheck(this.labelStyle), dart.nullCheck(this.labelDisplayMode), "Bar", dart.nullCheck(this.themeData), offset, dart.nullCheck(this.color), this[_highPoint], this[_lowPoint], dart.nullCheck(this[_segments]));
        }
      }
    }
  };
  (spark_bar_renderer._RenderSparkBarChart.new = function(opts) {
    let data = opts && 'data' in opts ? opts.data : null;
    let dataCount = opts && 'dataCount' in opts ? opts.dataCount : null;
    let xValueMapper = opts && 'xValueMapper' in opts ? opts.xValueMapper : null;
    let yValueMapper = opts && 'yValueMapper' in opts ? opts.yValueMapper : null;
    let isInversed = opts && 'isInversed' in opts ? opts.isInversed : null;
    let axisCrossesAt = opts && 'axisCrossesAt' in opts ? opts.axisCrossesAt : null;
    let axisLineWidth = opts && 'axisLineWidth' in opts ? opts.axisLineWidth : null;
    let axisLineColor = opts && 'axisLineColor' in opts ? opts.axisLineColor : null;
    let axisLineDashArray = opts && 'axisLineDashArray' in opts ? opts.axisLineDashArray : null;
    let color = opts && 'color' in opts ? opts.color : null;
    let firstPointColor = opts && 'firstPointColor' in opts ? opts.firstPointColor : null;
    let lastPointColor = opts && 'lastPointColor' in opts ? opts.lastPointColor : null;
    let highPointColor = opts && 'highPointColor' in opts ? opts.highPointColor : null;
    let lowPointColor = opts && 'lowPointColor' in opts ? opts.lowPointColor : null;
    let negativePointColor = opts && 'negativePointColor' in opts ? opts.negativePointColor : null;
    let plotBand = opts && 'plotBand' in opts ? opts.plotBand : null;
    let borderWidth = opts && 'borderWidth' in opts ? opts.borderWidth : null;
    let borderColor = opts && 'borderColor' in opts ? opts.borderColor : null;
    let labelDisplayMode = opts && 'labelDisplayMode' in opts ? opts.labelDisplayMode : null;
    let labelStyle = opts && 'labelStyle' in opts ? opts.labelStyle : null;
    let sparkChartDataDetails = opts && 'sparkChartDataDetails' in opts ? opts.sparkChartDataDetails : null;
    let themeData = opts && 'themeData' in opts ? opts.themeData : null;
    let coordinatePoints = opts && 'coordinatePoints' in opts ? opts.coordinatePoints : null;
    let dataPoints = opts && 'dataPoints' in opts ? opts.dataPoints : null;
    this[___RenderSparkBarChart__segments] = null;
    this[___RenderSparkBarChart__segments_isSet] = false;
    this[___RenderSparkBarChart__lowPoint] = null;
    this[___RenderSparkBarChart__highPoint] = null;
    this[_borderWidth] = borderWidth;
    this[_borderColor] = borderColor;
    this[_labelDisplayMode] = labelDisplayMode;
    this[_labelStyle] = labelStyle;
    this[_axisCrossesAt] = axisCrossesAt;
    spark_bar_renderer._RenderSparkBarChart.__proto__.new.call(this, {data: data, dataCount: dataCount, xValueMapper: xValueMapper, yValueMapper: yValueMapper, isInversed: isInversed, axisCrossesAt: axisCrossesAt, axisLineWidth: axisLineWidth, axisLineColor: axisLineColor, axisLineDashArray: axisLineDashArray, color: color, firstPointColor: firstPointColor, lastPointColor: lastPointColor, highPointColor: highPointColor, lowPointColor: lowPointColor, negativePointColor: negativePointColor, plotBand: plotBand, sparkChartDataDetails: sparkChartDataDetails, themeData: themeData, coordinatePoints: coordinatePoints, dataPoints: dataPoints});
    ;
  }).prototype = spark_bar_renderer._RenderSparkBarChart.prototype;
  dart.addTypeTests(spark_bar_renderer._RenderSparkBarChart);
  dart.addTypeCaches(spark_bar_renderer._RenderSparkBarChart);
  dart.setMethodSignature(spark_bar_renderer._RenderSparkBarChart, () => ({
    __proto__: dart.getMethods(spark_bar_renderer._RenderSparkBarChart.__proto__),
    getAxisHeight: dart.fnType(core.double, []),
    [_renderBarSeries]: dart.fnType(dart.void, [ui.Canvas, ui.Offset])
  }));
  dart.setGetterSignature(spark_bar_renderer._RenderSparkBarChart, () => ({
    __proto__: dart.getGetters(spark_bar_renderer._RenderSparkBarChart.__proto__),
    borderWidth: dart.nullable(core.double),
    borderColor: dart.nullable(ui.Color),
    labelDisplayMode: dart.nullable($enum.SparkChartLabelDisplayMode),
    labelStyle: dart.nullable(text_style.TextStyle),
    axisCrossesAt: core.double,
    [_segments]: dart.nullable(core.List$(ui.Rect)),
    [_lowPoint]: core.num,
    [_highPoint]: core.num
  }));
  dart.setSetterSignature(spark_bar_renderer._RenderSparkBarChart, () => ({
    __proto__: dart.getSetters(spark_bar_renderer._RenderSparkBarChart.__proto__),
    borderWidth: dart.nullable(core.double),
    borderColor: dart.nullable(ui.Color),
    labelDisplayMode: dart.nullable($enum.SparkChartLabelDisplayMode),
    labelStyle: dart.nullable(text_style.TextStyle),
    [_segments]: dart.nullable(core.List$(ui.Rect)),
    [_lowPoint]: core.num,
    [_highPoint]: core.num
  }));
  dart.setLibraryUri(spark_bar_renderer._RenderSparkBarChart, I[0]);
  dart.setFieldSignature(spark_bar_renderer._RenderSparkBarChart, () => ({
    __proto__: dart.getFields(spark_bar_renderer._RenderSparkBarChart.__proto__),
    [_borderWidth]: dart.fieldType(dart.nullable(core.double)),
    [_borderColor]: dart.fieldType(dart.nullable(ui.Color)),
    [_labelDisplayMode]: dart.fieldType(dart.nullable($enum.SparkChartLabelDisplayMode)),
    [_labelStyle]: dart.fieldType(dart.nullable(text_style.TextStyle)),
    [_axisCrossesAt]: dart.fieldType(dart.nullable(core.double)),
    [___RenderSparkBarChart__segments]: dart.fieldType(dart.nullable(core.List$(ui.Rect))),
    [___RenderSparkBarChart__segments_isSet]: dart.fieldType(core.bool),
    [___RenderSparkBarChart__lowPoint]: dart.fieldType(dart.nullable(core.num)),
    [___RenderSparkBarChart__highPoint]: dart.fieldType(dart.nullable(core.num))
  }));
  dart.trackLibraries("packages/syncfusion_flutter_charts/src/sparkline/renderers/spark_bar_renderer.dart", {
    "package:syncfusion_flutter_charts/src/sparkline/renderers/spark_bar_renderer.dart": spark_bar_renderer
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["spark_bar_renderer.dart"],"names":[],"mappings":"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","file":"../../../../../../../../../../../D:/packages/syncfusion_flutter_charts/src/sparkline/renderers/spark_bar_renderer.dart.lib.js"}');
  // Exports:
  return {
    src__sparkline__renderers__spark_bar_renderer: spark_bar_renderer
  };
}));

//# sourceMappingURL=spark_bar_renderer.dart.lib.js.map
